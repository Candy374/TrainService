<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Arch.Data</name>
    </assembly>
    <members>
        <member name="T:Arch.Data.Common.Enums.DatabaseProviderType">
            <summary>
            数据库类别，如MySql或者Sql Server等
            </summary>
        </member>
        <member name="M:Arch.Data.Common.Enums.DatabaseProviderTypeFactory.GetProviderType(System.String)">
            <summary>
            从字符串获取数据库类型
            </summary>
            <param name="providerType"></param>
            <returns></returns>
        </member>
        <member name="T:Arch.Data.Common.Enums.MarkDownEnums">
            <summary>
            手动MarkDown，自动MarkDown但是没权限，自动MarkDown
            </summary>
        </member>
        <member name="F:Arch.Data.Common.Tracing.Configuration.TracingElement.NameProperty">
            <summary>
            名称
            </summary>
        </member>
        <member name="F:Arch.Data.Common.Tracing.Configuration.TracingElement.TurnProperty">
            <summary>
            开关
            </summary>
        </member>
        <member name="P:Arch.Data.Common.Tracing.Configuration.TracingElement.Name">
            <summary>
            名称,关键字
            </summary>
        </member>
        <member name="P:Arch.Data.Common.Tracing.Configuration.TracingElement.Turn">
            <summary>
            开关
            </summary>
        </member>
        <member name="T:Arch.Data.Common.Tracing.DalTracing">
            <summary>
            每个BaseDao的方法都会建立一个DalTracing，采用ThreadStatic方式，跟踪DAL内部的执行
            
            原理解释
            先决条件： 同一个线程，同一时刻，只会有一个BaseDao的方法在执行
            
            在获取到当前线程的实例时，先进行清空操作，可以保证每个BaseDao的方法都可以有不受干扰的DalTracing
            
            </summary>
        </member>
        <member name="M:Arch.Data.Common.Tracing.DalTracing.NextPhase">
            <summary>
            切换到下个阶段
            
            BaseDao中开启 Initialize阶段
            
            DatabaseBridge开启Execute阶段
            
            Database以及SqlTable共同开启PostExecute阶段
            
            </summary>
        </member>
        <member name="P:Arch.Data.Common.Tracing.DalTracing.CurrentSpan">
            <summary>
            当前所在的CLog的Span
            </summary>
        </member>
        <member name="P:Arch.Data.Common.Tracing.DalTracing.ActivatingPhase">
            <summary>
            当前的执行阶段，每个阶段执行成功后，就会被丢弃，取而代之的是新的一个阶段
            </summary>
        </member>
        <member name="P:Arch.Data.Common.Tracing.DalTracing.DatabaseSet">
            <summary>
            Logic DbName
            </summary>
        </member>
        <member name="P:Arch.Data.Common.Tracing.DalTracing.AllInOneKey">
            <summary>
            当前操作对应的All In  One Key
            </summary>
        </member>
        <member name="M:Arch.Data.Common.Util.SplitUtil.SplitAsInt32(System.String)">
            <summary>
            将执行的字符串分割后存入HashSet
            </summary>
            <param name="strToSplit"></param>
            <returns></returns>
        </member>
        <member name="T:Arch.Data.Common.Vi.DalConfigBean">
            <summary>
            该ConfigBean被DAL内部使用，返回的属性值依赖于GlobalBean，
            </summary>
        </member>
        <member name="T:Arch.Data.BaseDaoFactory">
            <summary>
            创建basedao工厂
            </summary>
        </member>
        <member name="M:Arch.Data.BaseDaoFactory.CreateBaseDao(System.String)">
            <summary>
            创建basedao工厂
            </summary>
            <param name="logicDbName">数据库逻辑名称</param>
            <returns>BaseDao</returns>
        </member>
        <member name="M:Arch.Data.BaseDaoFactory.CreateCrossShardDao(System.String)">
            <summary>
            获取CrossShard操作DAO
            </summary>
            <param name="logicDbName"></param>
            <returns>CrossShardDao</returns>
            
        </member>
        <member name="M:Arch.Data.BaseDaoFactory.CreateDialectDao(System.String)">
            <summary>
            获取方言DAO，请注意返回null的情况
            </summary>
            <param name="logicDbName"></param>
            <returns>IDialectDao</returns>
        </member>
        <member name="T:Arch.Data.Common.constant.DALExtStatementConstant">
            <summary>
            DAL Extended Statement constant definition
            </summary>
        </member>
        <member name="F:Arch.Data.Common.constant.DALExtStatementConstant.TIMEOUT">
            <summary>
            the timeout of SQL command
            </summary>
        </member>
        <member name="F:Arch.Data.Common.constant.DALExtStatementConstant.SHARDID">
            <summary>
            the id of specified shard
            </summary>
        </member>
        <member name="F:Arch.Data.Common.constant.DALExtStatementConstant.TABLEID">
            <summary>
            shard by table
            </summary>
        </member>
        <member name="F:Arch.Data.Common.constant.DALExtStatementConstant.SETNULL">
            <summary>
            skip null or not when update
            </summary>
        </member>
        <member name="F:Arch.Data.Common.constant.DALExtStatementConstant.LOCK">
            <summary>
            specify the LOCK TYPE
            </summary>
        </member>
        <member name="F:Arch.Data.Common.constant.DALExtStatementConstant.SENSITIVE">
            <summary>
            mark the SQL statement as sensitive
            </summary>
        </member>
        <member name="F:Arch.Data.Common.constant.DALExtStatementConstant.INSERTPKVALUE">
            <summary>
            新增主键的值
            </summary>
        </member>
        <member name="F:Arch.Data.Common.constant.DALExtStatementConstant.ISHASID">
            <summary>
            是否有自增长id
            </summary>
        </member>
        <member name="F:Arch.Data.Common.constant.DALExtStatementConstant.FRESHNESS">
            <summary>
            读写分离新鲜度
            </summary>
        </member>
        <member name="F:Arch.Data.Common.constant.DALExtStatementConstant.SQL">
            <summary>
            当前执行的SQL
            </summary>
        </member>
        <member name="F:Arch.Data.Common.constant.DALExtStatementConstant.OPERATION_TYPE">
            <summary>
            Operation Type:replaced for parameter in method
            </summary>
        </member>
        <member name="F:Arch.Data.Common.constant.DALExtStatementConstant.MAP">
            <summary>
            Map:used for sharding
            </summary>
        </member>
        <member name="F:Arch.Data.Common.constant.DALExtStatementConstant.SHARD_COLUMN_VALUE">
            <summary>
            Shard column value:built in hints to calculate shard id
            </summary>
        </member>
        <member name="F:Arch.Data.Common.constant.DALExtStatementConstant.SHARD_IDS">
            <summary>
            Specify Shard Ids
            </summary>
        </member>
        <member name="F:Arch.Data.Common.constant.DALExtStatementConstant.TABLE_IDS">
            <summary>
            Specify Table Ids
            </summary>
        </member>
        <member name="F:Arch.Data.Common.constant.DALExtStatementConstant.SHARD_TABLE_DICT">
            <summary>
            Specify shard,table mapping dict
            </summary>
        </member>
        <member name="T:Arch.Data.Common.Logging.Listeners.CentralLoggingListener">
            <summary>
            central logging 侦听器 
            </summary>
        </member>
        <member name="T:Arch.Data.Common.Logging.Listener">
            <summary>
            日志侦听器基类
            </summary>
        </member>
        <member name="T:Arch.Data.Common.Logging.IListener">
            <summary>
            日志侦听器接口
            </summary>
        </member>
        <member name="M:Arch.Data.Common.Logging.IListener.Log(Arch.Data.Common.Logging.LogEntry)">
            <summary>
            日志侦听器接口
            </summary>
            <param name="logEntry">日志项</param>
        </member>
        <member name="M:Arch.Data.Common.Logging.IListener.Init(System.String,Arch.Data.Common.Logging.LogLevel,System.String)">
            <summary>
            初始化
            </summary>
            <param name="name">名称</param>
            <param name="level">日志级别</param>
            <param name="setting">配置</param>
        </member>
        <member name="M:Arch.Data.Common.Logging.IListener.Validate(Arch.Data.Common.Logging.LogEntry)">
            <summary>
            验证日志的间隔时间
            </summary>
            <param name="entry">日志项</param>
        </member>
        <member name="P:Arch.Data.Common.Logging.IListener.Name">
            <summary>
            日志侦听器名称
            </summary>
        </member>
        <member name="P:Arch.Data.Common.Logging.IListener.Level">
            <summary>
            日志日志级别过滤器
            只有日志级别大于设定值的日志才会记录
            </summary>
        </member>
        <member name="M:Arch.Data.Common.Logging.Listener.Log(Arch.Data.Common.Logging.LogEntry)">
            <summary>
            日志侦听器接口
            </summary>
            <param name="logEntry">日志项</param>
        </member>
        <member name="M:Arch.Data.Common.Logging.Listener.Dispose">
            <summary>
            显示释放
            </summary>
        </member>
        <member name="M:Arch.Data.Common.Logging.Listener.WriteLog(Arch.Data.Common.Logging.LogEntry)">
            <summary>
            真正的写日志方法
            </summary>
            <param name="logEntry">日志项</param>
        </member>
        <member name="M:Arch.Data.Common.Logging.Listener.Finalize">
            <summary>
            析构器
            </summary>
        </member>
        <member name="M:Arch.Data.Common.Logging.Listener.Dispose(System.Boolean)">
            <summary>
            真正的资源释放程序
            </summary>
            <param name="isDisposing">是否正在释放</param>
        </member>
        <member name="M:Arch.Data.Common.Logging.Listener.Init(System.String,Arch.Data.Common.Logging.LogLevel,System.String)">
            <summary>
            初始化
            </summary>
            <param name="name">名称</param>
            <param name="level">级别</param>
            <param name="setting"></param>
        </member>
        <member name="M:Arch.Data.Common.Logging.Listener.Validate(Arch.Data.Common.Logging.LogEntry)">
            <summary>
            1. 如果是 Warning/Error/Fatal, 直接写入
            2. 如果是Info及以下，进行如下操作
                a. 算出不带Where条件的Hash
                b. 如果此Sql有参数，查找此Hash一个小时之前是否有过执行，如果有，发送，并将此hash的最后执行时间修改为当前时间
                c. 如果此Sql没有参数，查找此Hash在5分钟之前是否有过执行，如果有，发送，并将此hash的最后执行时间修改为当前时间
                d. 如果Hash数量超过 5千个，开启预备清理模式
                    1). 超过5千个之后，每增加5千个，开启一次清理模式
                    2). 如果某Hash超过一个小时还没有过执行，那么清除之（此处效率极低，写的很烂）
            
            </summary>
            <param name="entry"></param>
            <returns>true表可以发送
            false 表不可以发送</returns>
        </member>
        <member name="M:Arch.Data.Common.Logging.Listener.ClearCache(System.DateTime,System.TimeSpan)">
            <summary>
            to clear the cache when:
            #1. cache size > 5000
            #2. more requests than 5000 come in after #1 matches
            
            only clear the timeout entry
            
            只清除超时的
            </summary>
        </member>
        <member name="P:Arch.Data.Common.Logging.Listener.Level">
            <summary>
            日志级别过滤器
            </summary>
        </member>
        <member name="P:Arch.Data.Common.Logging.Listener.Name">
            <summary>
            侦听器名称
            </summary>
        </member>
        <member name="P:Arch.Data.Common.Logging.LogPolicy.Encrypt">
            <summary>
            whether encrypt the SQL parameters
            "yes": 3, encrypt in/out
            "in" : 1, encrypt in
            "out": 2, encrypt out
            "none" 0, encrypt neither
            </summary>
        </member>
        <member name="F:Arch.Data.Common.Metrics.CentralLoggingMetricsHandler.metricsLogger">
            <summary>
            Central Logging Metrics API handler
            </summary>
        </member>
        <member name="M:Arch.Data.Common.Metrics.CentralLoggingMetricsHandler.Log(System.String,System.Int64,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            发送统计数据，long类型
            </summary>
            <param name="metricName">统计数据名称</param>
            <param name="value">值</param>
            <param name="tags"></param>
        </member>
        <member name="M:Arch.Data.Common.Metrics.CentralLoggingMetricsHandler.Log(System.String,System.Single,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            发送统计数据，float类型
            </summary>
            <param name="metricName">统计数据名称</param>
            <param name="value">值</param>
            <param name="tags"></param>
        </member>
        <member name="F:Arch.Data.Common.Metrics.Configuration.MetricsElement.c_NameProperty">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Arch.Data.Common.Metrics.Configuration.MetricsElement.Name">
            <summary>
            名称,关键字
            </summary>
        </member>
        <member name="T:Arch.Data.Common.Metrics.MetricsLogger">
            <summary>
            日志对象
            </summary>
        </member>
        <member name="F:Arch.Data.Common.Metrics.MetricsLogger.COUNT">
            <summary>
            SQL记次统计
            </summary>
        </member>
        <member name="F:Arch.Data.Common.Metrics.MetricsLogger.COST">
            <summary>
            SQL时长统计
            </summary>
        </member>
        <member name="F:Arch.Data.Common.Metrics.MetricsLogger.MASTER_SLAVE_COUNT">
            <summary>
            读写分离比例
            </summary>
        </member>
        <member name="F:Arch.Data.Common.Metrics.MetricsLogger.MASTER_SLAVE_SP">
            <summary>
            DAL读取延迟的次数
            </summary>
        </member>
        <member name="F:Arch.Data.Common.Metrics.MetricsLogger.DBTYPE">
            <summary>
            Master或者Slave
            </summary>
        </member>
        <member name="F:Arch.Data.Common.Metrics.MetricsLogger.OPTTYPE">
            <summary>
            Read或者Write
            </summary>
        </member>
        <member name="F:Arch.Data.Common.Metrics.MetricsLogger.DAO">
            <summary>
            SQL 调用者统计tag
            </summary>
        </member>
        <member name="F:Arch.Data.Common.Metrics.MetricsLogger.METHOD">
            <summary>
            SQL 调用方法统计tag
            </summary>
        </member>
        <member name="F:Arch.Data.Common.Metrics.MetricsLogger.SIZE">
            <summary>
            SQL正文长度统计tag
            </summary>
        </member>
        <member name="F:Arch.Data.Common.Metrics.MetricsLogger.STATUS">
            <summary>
            SQL执行是否成功统计tag
            </summary>
        </member>
        <member name="F:Arch.Data.Common.Metrics.MetricsLogger.CLIENT">
            <summary>
            客户端标识
            </summary>
        </member>
        <member name="F:Arch.Data.Common.Metrics.MetricsLogger.LastLogTime">
            <summary>
            上次统计时间
            </summary>
        </member>
        <member name="M:Arch.Data.Common.Metrics.MetricsLogger.#cctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Arch.Data.Common.Metrics.MetricsLogger.WriteLog(Arch.Data.DbEngine.Statement)">
            <summary>
            统计SQL Statement执行情况
            </summary>
        </member>
        <member name="F:Arch.Data.Common.Util.CommonUtil.Key">
            <summary> 
            对称加密解密的密钥 
            </summary> 
        </member>
        <member name="M:Arch.Data.Common.Util.CommonUtil.GetHashCode4SQLString(System.String)">
            <summary>
             获得string对象的Hash值，每次耗时~5 微秒
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Common.Util.CommonUtil.GetHash(System.String)">
            <summary>
            获得string对象的Hash值
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Common.Util.CommonUtil.GetTaggedAppIDSqlTest(System.String)">
            <summary>
            给SQL打上APPID的Tag
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Common.Util.CommonUtil.GetTaggedSQLText(System.String)">
            <summary>
            SQL打Tag
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Common.Util.CommonUtil.DesEncrypt(System.String)">
            <summary> 
            DES加密 
            </summary> 
            <param name="encryptString"></param> 
            <returns>返回加密后的Base64String</returns> 
        </member>
        <member name="M:Arch.Data.Common.Util.CommonUtil.DesDecrypt(System.String)">
            <summary> 
            DES解密 
            </summary> 
            <param name="decryptString"></param> 
            <returns></returns> 
        </member>
        <member name="M:Arch.Data.Common.Util.CommonUtil.GetHashCode(System.String)">
            <summary>
            获取 HashCode
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:Arch.Data.BaseDao">
            <summary>
            数据库访问类，一般通过BaseDaoFactory的静态方法CreateBaseDao创建
            </summary>
        </member>
        <member name="F:Arch.Data.BaseDao.LogicDbName">
            <summary>
            Database Set name
            </summary>
        </member>
        <member name="F:Arch.Data.BaseDao.Table">
            <summary>
            SqlTable just like placeholder
            </summary>
        </member>
        <member name="M:Arch.Data.BaseDao.#ctor(System.String)">
            <summary>
            构造初始化
            </summary>
            <param name="logicDbName">逻辑数据库名</param>
        </member>
        <member name="M:Arch.Data.BaseDao.GetQuery">
            <summary>
            获得查询对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.BaseDao.GetQuery``1">
            <summary>
            获得查询对象
            </summary>
            <typeparam name="T">查询实体类</typeparam>
            <returns>查询对象</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.GetUpdatePartially``1">
            <summary>
            获取部分更新对象
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.BaseDao.GetListFromDataTable``1(System.Data.DataTable)">
            <summary>
            将DataTable填充到IList中去
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dataTable"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.BaseDao.GetListFromIDataReader``1(System.Data.IDataReader)">
            <summary>
            将IDataReader填充到IList中去，请手动关闭IDataReader
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.BaseDao.Insert``1(``0)">
            <summary>
            插入对象 
            <example><para>示例：</para>
            <code>
            readonly BaseDao baseDao = BaseDaoFactory.CreateBaseDao("your databaseSetName");
             City c = new City
                            {
                                Name = "test",
                                Population = "test",
                               Country1Code = "test",
                                District = "test"
                            };
            baseDao.Insert(city);
            </code>
            </example>
            <remarks>
            <para>备注:</para>
            <para> 1.实体类打上了[ID]这个标签，插入成功将返回新增的主键值</para> 
            <para> 2.实体类打上了[PK]这个标签，(插入成功将返回新增的主键值，如果PK不为ID，则返回影响条数)</para> 
            </remarks>
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="obj">实体对象</param>
            <returns>返回第一列值（譬如自增长ID）</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.Insert``1(``0,System.Collections.IDictionary)">
            <summary>
            插入对象，需要有增删改的权限
            <example><para>示例：</para>
            <code>
             readonly BaseDao baseDao = BaseDaoFactory.CreateBaseDao("your databaseSetName");<br/>
             City c = new City
                            {
                                Name = "test",
                                Population = "test",
                                Country1Code = "test",
                                District = "test"
                            };
             IDictionary statementParams = new  new Hashtable();
             statementParams.Add(DALExtStatementConstant.TIMEOUT, "1000");
             baseDao.Insert("yourdatabaseSetName",city,statementParams);
            </code>
            </example>
            <remarks>
            <para>备注:</para>
            <para> 1.实体类打上了[ID]这个标签，插入成功将返回新增的主键值</para> 
            <para> 2.实体类打上了[PK]这个标签，(插入成功将返回新增的主键值，如果PK不为ID，则返回影响条数)</para> 
            <para> 3.扩展属性的key，具体可以查询DALExtStatementConstant的常量列表（譬如：timeout等）</para> 
            <para> 4.可以通过指定的逻辑数据库名插入数据，也就是一个dao(数据访问对象)支持多个数据库连接</para> 
            </remarks>
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="obj">实体对象</param>
            <param name="hints">指令扩展属性（分片：shardcol,超时:timeout） </param>
            <returns>返回第一列值（譬如自增长ID）</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.InsertByComplexPk``1(``0)">
            <summary>
             插入对象(复合主键)
            <example><para>示例：</para>
            <code>
             readonly BaseDao baseDao = BaseDaoFactory.CreateBaseDao("your databaseSetName");<br/>
             City c = new City
                            {
                                Name = "test",
                                Population = "test",
                                Country1Code = "test",
                                District = "test"
                            };
             IDictionary statementParams = new  new Hashtable();
             statementParams.Add(DALExtStatementConstant.TIMEOUT, "1000");
             baseDao.InsertByComplexPk("yourdatabaseSetName",city,statementParams);
            </code>
            </example>
            <remarks>
            <para>备注:</para>
            <para> 1.实体类打上了多个[PK]这个标签，插入成功将返回影响行数</para> 
            </remarks>
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="obj">实体对象</param>
            <returns>返回影响行数</returns>
        </member>
        <member name="M:Arch.Data.BaseDao.InsertByComplexPk``1(``0,System.Collections.IDictionary)">
            <summary>
            插入对象(复合主键)
            <example><para>示例：</para>
            <code>
             readonly BaseDao baseDao = BaseDaoFactory.CreateBaseDao("your databaseSetName");<br/>
             City c = new City
                            {
                                Name = "test",
                                Population = "test",
                                Country1Code = "test",
                                District = "test"
                            };
             IDictionary statementParams = new  new Hashtable();
             statementParams.Add(DALExtStatementConstant.TIMEOUT, "1000");
             baseDao.InsertByComplexPk("yourdatabaseSetName",city,statementParams);
            </code>
            </example>
            <remarks>
            <para>备注:</para>
            <para> 1.实体类打上了多个[PK]这个标签，插入成功将返回影响行数</para> 
            <para> 2.扩展属性的key，具体可以查询DALExtStatementConstant的常量列表（譬如：timeout等）</para> 
            <para> 3.可以通过指定的逻辑数据库名插入数据，也就是一个dao(数据访问对象)支持多个数据库连接</para> 
            </remarks>
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="obj">实体对象</param>
            <param name="hints">指令扩展属性（分片：shardcol,超时:timeout）</param>
            <returns>返回影响行数</returns>
        </member>
        <member name="M:Arch.Data.BaseDao.BulkInsert``1(System.Collections.Generic.IList{``0})">
            <summary>
            批量插入对象
            <example><para>示例：</para>
            <code>
            <para>
              readonly BaseDao baseDao = BaseDaoFactory.CreateBaseDao("your databaseSetName");
              List( &lt; UserPrizeDrawedResultsEntity  &gt; list = new List &lt; UserPrizeDrawedResultsEntity &gt;();
              UserPrizeDrawedResultsEntity item = null;
              for (int i = 0; i  &lt; 100; i++)
              {
                   item = new UserPrizeDrawedResultsEntity();
                   item.PrizeDrawTime ="test";
                   item.PrizeInfoID = "test";
                   item.PrizeActivityId = "test";
                   item.Uid = "test";
                   list.Add(item);
               }
              baseDao.BulkInsert(list);</para>
            </code>
            </example>
            <remarks>
            <para>备注:</para>
            <para> 1.batchSize最大10000，建议100，分批插入。</para> 
            <para> 2.该批量插入推荐在mysql中使用，如果MsSQL推荐用表变量方式处理</para> 
            </remarks>
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="list">对象集合</param>
            <returns>是否成功</returns>
            <exception cref="T:Arch.Data.DalException">数据访问异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.BulkInsert``1(System.Collections.Generic.IList{``0},System.Collections.IDictionary)">
            <summary>
            批量插入对象,batchSize：100
            <example><para>示例：</para>
            <code>
            <para>
              readonly BaseDao baseDao = BaseDaoFactory.CreateBaseDao("your databaseSetName");
              List( &lt; UserPrizeDrawedResultsEntity  &gt; list = new List &lt; UserPrizeDrawedResultsEntity &gt;();
              IDictionary statementParams = new  new Hashtable();
              statementParams.Add(DALExtStatementConstant.TIMEOUT, "1000");
              UserPrizeDrawedResultsEntity item = null;
              for (int i = 0; i  &lt; 100; i++)
              {
                   item = new UserPrizeDrawedResultsEntity();
                   item.PrizeDrawTime ="test";
                   item.PrizeInfoID = "test";
                   item.PrizeActivityId = "test";
                   item.Uid = "test";
                   list.Add(item);
               }
              baseDao.BulkInsert(list);</para>
            </code>
            </example>
            <remarks>
            <para>备注:批量插入对象</para>
            <para> 1.batchSize最大10000，建议100，分批插入。</para> 
            <para> 2.该批量插入推荐在mysql中使用，如果MsSQL推荐用表变量方式处理</para> 
            <para> 3.扩展属性的key，具体可以查询DALExtStatementConstant的常量列表（譬如：timeout等）</para>
            <para> 4.可以通过指定的逻辑数据库名插入数据，也就是一个dao(数据访问对象)支持多个数据库连接</para> 
            </remarks>
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="list">对象集合</param>
            <param name="hints">扩展属性，譬如:timeout等 </param>
            <returns>是否成功</returns>
            <remarks>1.集合对象不能超过10000, 2.SQLServer参数不能超过2100, Mysql控制报文最大长度</remarks>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.Update``1(``0)">
            <summary>
            更新记录
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="obj">实体对象</param>
            <returns>影响行数</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.Update``1(``0,System.Collections.IDictionary)">
            <summary>
            更新记录
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="obj">对象</param>
            <param name="hints">指令扩展属性（分片：shardcol,超时:timeout）</param>
            <returns>影响行数</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.UpdatePartially``1(Arch.Data.Orm.partially.IUpdatePartial{``0},``0)">
            <summary>
            更新记录
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="partially"></param>
            <param name="obj">实体对象</param>
            <returns>影响行数</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.UpdatePartially``1(Arch.Data.Orm.partially.IUpdatePartial{``0},``0,System.Collections.IDictionary)">
            <summary>
            更新记录
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="partially"></param>
            <param name="obj">对象</param>
            <param name="hints">指令扩展属性（分片：shardcol,超时:timeout）</param>
            <returns>影响行数</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.ExecSpPartially``1(Arch.Data.Orm.partially.IUpdatePartial{``0},System.String,``0)">
            <summary>
            更新记录，调用此方法有如下要求：存储过程参数名必须与对应的表字段名一致
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="partially"></param>
            <param name="spName"></param>
            <param name="obj">实体对象</param>
            <returns>影响行数</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.ExecSpPartially``1(Arch.Data.Orm.partially.IUpdatePartial{``0},System.String,``0,System.Collections.IDictionary)">
            <summary>
            更新记录，调用此方法有如下要求：存储过程参数名必须与对应的表字段名一致
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="partially"></param>
            <param name="spName"></param>
            <param name="obj">对象</param>
            <param name="hints">指令扩展属性（分片：shardcol,超时:timeout）</param>
            <returns>影响行数</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.Delete``1(``0)">
            <summary>
            删除记录
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="obj">对象</param>
            <returns>影响行数</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.Delete``1(``0,System.Collections.IDictionary)">
            <summary>
            删除记录
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="obj">对象</param>
            <param name="hints">指令扩展属性（分片：shardcol,超时:timeout）</param>
            <returns>影响行数</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.SelectListOfSingleField``1(System.String)">
            <summary>
            取一个字段的结果集，返回该字段的List
            </summary>
            <typeparam name="T">字段类型</typeparam>
            <param name="sql">SQL语句</param>
            <returns>该字段的结果集</returns>
        </member>
        <member name="M:Arch.Data.BaseDao.SelectListOfSingleField``1(System.String,Arch.Data.DbEngine.StatementParameterCollection)">
            <summary>
            取一个字段的结果集，返回该字段的List
            </summary>
            <typeparam name="T">字段类型</typeparam>
            <param name="sql">SQL语句</param>
            <param name="parameters">参数</param>
            <returns>该字段的结果集</returns>
        </member>
        <member name="M:Arch.Data.BaseDao.SelectListOfSingleField``1(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary)">
            <summary>
            取一个字段的结果集，返回该字段的List
            </summary>
            <typeparam name="T">字段类型</typeparam>
            <param name="sql">SQL语句</param>
            <param name="parameters">参数</param>
            <param name="hints">扩展参数，如timeout, shardid等</param>
            <returns>该字段的结果集</returns>
        </member>
        <member name="M:Arch.Data.BaseDao.SelectListOfSingleField``1(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType)">
            <summary>
            取一个字段的结果集，返回该字段的List
            </summary>
            <typeparam name="T">字段类型</typeparam>
            <param name="sql">SQL语句</param>
            <param name="parameters">参数</param>
            <param name="hints">扩展参数，如timeout, shardid等</param>
            <param name="operationType">读写分离类型，Read强制到Slave库，Write强制到Master库</param>
            <returns>该字段的结果集</returns>
        </member>
        <member name="M:Arch.Data.BaseDao.GetByKey``1(System.Object)">
            <summary>
            根据主键获得一个对象,输入值类型一定要和实体类生成的主键类型一致，不支持联合组键
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">单一主键</param>
            <returns>对象</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.GetByKey``1(System.Object,System.Collections.IDictionary)">
            <summary>
             根据主键获得一个对象,输入值类型一定要和实体类生成的主键类型一致，不支持联合组键
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">单一主键</param>
            <param name="hints">指令参数：如timeout</param>
            <returns>对象</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.GetByKey``1(System.Object,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType)">
            <summary>
             根据主键获得一个对象,输入值类型一定要和实体类生成的主键类型一致，不支持联合组键
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">单一主键</param>
            <param name="hints">指令参数：如timeout</param>
            <param name="operationType">操作类型，读写分离，默认从Master库读取</param>
            <returns>对象</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.GetAll``1">
            <summary>
            获取所有记录
            </summary>
            <typeparam name="T">实体类</typeparam>
            <returns>所有对象</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.GetAll``1(Arch.Data.DbEngine.OperationType)">
            <summary>
            获取所有记录
            </summary>
            <typeparam name="T">实体类</typeparam>
            <param name="operationType">操作类型，读写分离，默认从master库读取</param>
            <returns>所有对象</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.GetAll``1(System.Collections.IDictionary,Arch.Data.DbEngine.OperationType)">
            <summary>
            获取所有记录
            </summary>
            <typeparam name="T">实体类</typeparam>
            <param name="hints">指令参数：如timeout</param>
            <param name="operationType">操作类型，读写分离，默认从master库读取</param>
            <returns>所有对象</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.SelectList``1(System.String)">
            <summary>
            执行查询语句
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="sql">sql语句</param>
            <returns>结果集合</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.SelectList``1(System.String,Arch.Data.DbEngine.StatementParameterCollection)">
            <summary>
            执行查询语句
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameters">查询参数</param>
            <returns>结果集合</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.SelectList``1(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary)">
            <summary>
            执行查询语句
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameters">查询参数</param>
            <param name="hints">指令参数：如timeout</param>
            <returns>结果集合</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.SelectList``1(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType)">
            <summary>
            执行查询语句
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameters">查询参数</param>
            <param name="hints">指令参数：如timeout</param>
            <param name="operationType">操作类型，读写分离，默认从master库读取</param>
            <returns>结果集合</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.SelectListByAdapter``1(System.String)">
            <summary>
            执行查询语句
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="sql">sql语句</param>
            <returns>结果集合</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.SelectListByAdapter``1(System.String,Arch.Data.DbEngine.StatementParameterCollection)">
            <summary>
            执行查询语句
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameters">查询参数</param>
            <returns>结果集合</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.SelectListByAdapter``1(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary)">
            <summary>
            执行查询语句
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameters">查询参数</param>
            <param name="hints">指令参数：如timeout</param>
            <returns>结果集合</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.SelectListByAdapter``1(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType)">
            <summary>
            执行查询语句
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameters">查询参数</param>
            <param name="hints">指令参数：如timeout</param>
            <param name="operationType">操作类型，读写分离，默认从master库读取</param>
            <returns>结果集合</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.SelectList``1(Arch.Data.Orm.IQuery)">
            <summary>
            执行查询语句
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="query">查询对象</param>
            <returns>对象集合</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.SelectList``1(Arch.Data.Orm.IQuery,System.Collections.IDictionary)">
            <summary>
            执行查询语句
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="query">查询对象</param>
            <param name="hints">指令参数：如timeout</param>
            <returns>对象集合</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.SelectList``1(Arch.Data.Orm.IQuery,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType)">
            <summary>
            执行查询语句
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="query">查询对象</param>
            <param name="hints">指令参数：如timeout</param>
            <param name="operationType">操作类型，读写分离，默认从master库读取</param>
            <returns>对象集合</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.SelectListByAdapter``1(Arch.Data.Orm.IQuery)">
            <summary>
            执行查询语句
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="query">查询对象</param>
            <returns>对象集合</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.SelectListByAdapter``1(Arch.Data.Orm.IQuery,System.Collections.IDictionary)">
            <summary>
            执行查询语句
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="query">查询对象</param>
            <param name="hints">指令参数：如timeout</param>
            <returns>对象集合</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.SelectListByAdapter``1(Arch.Data.Orm.IQuery,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType)">
            <summary>
            执行查询语句
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="query">查询对象</param>
            <param name="hints">指令参数：如timeout</param>
            <param name="operationType">操作类型，读写分离，默认从master库读取</param>
            <returns>对象集合</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.SelectFirst``1(System.String)">
            <summary>
            获取第一行对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="sql">sql语句</param>
            <returns>对象</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.SelectFirst``1(System.String,Arch.Data.DbEngine.StatementParameterCollection)">
            <summary>
            获取第一行对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameters">查询参数</param>
            <returns>对象</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.SelectFirst``1(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary)">
            <summary>
            获取第一行对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameters">查询参数</param>
            <param name="hints">指令参数：如timeout</param>
            <returns>对象</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.SelectFirst``1(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType)">
            <summary>
            获取第一行对象
            </summary>
            <typeparam name="T">对象</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameters">查询参数</param>
            <param name="hints">指令参数：如timeout</param>
            <param name="operationType">操作类型，读写分离，默认从master库读取</param>
            <returns>对象</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.SelectFirst``1(Arch.Data.Orm.IQuery)">
            <summary>
            获取第一行对象
            </summary>
            <typeparam name="T">对象</typeparam>
            <param name="query">查询对象</param>
            <returns>对象</returns>
        </member>
        <member name="M:Arch.Data.BaseDao.SelectFirst``1(Arch.Data.Orm.IQuery,System.Collections.IDictionary)">
            <summary>
            获取第一行对象
            </summary>
            <typeparam name="T">对象</typeparam>
            <param name="query">查询对象</param>
            <param name="hints">指令参数：如timeout</param>
            <returns>对象</returns>
        </member>
        <member name="M:Arch.Data.BaseDao.SelectFirst``1(Arch.Data.Orm.IQuery,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType)">
            <summary>
            获取第一行对象
            </summary>
            <typeparam name="T">对象</typeparam>
            <param name="query">查询对象</param>
            <param name="hints">指令参数：如timeout</param>
            <param name="operationType">操作类型，读写分离，默认从master库读取</param>
            <returns>对象</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.SelectDataReader(System.String)">
            <summary>
            执行查询语句
            </summary>
            <param name="sql">SQL语句</param>
            <returns>IDataReader</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.SelectDataReader(System.String,Arch.Data.DbEngine.StatementParameterCollection)">
            <summary>
            执行查询语句
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameters">查询参数</param>
            <returns>IDataReader</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.SelectDataReader(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary)">
            <summary>
            执行查询语句
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameters">查询参数</param>
            <param name="hints">指令扩展属性</param>
            <returns>IDataReader</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.SelectDataReader(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType)">
            <summary>
            执行查询语句
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameters">查询参数</param>
            <param name="hints">指令扩展属性</param>
            <param name="operationType">操作类型，读写分离，默认从master库读取</param>
            <returns>IDataReader</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.VisitDataReader``1(System.String,System.Func{System.Data.IDataReader,``0})">
            <summary>
            执行查询语句，并返回指定的结果（连接会确认被释放，安全）
            </summary>
            <typeparam name="T">返回值的类型</typeparam>
            <param name="sql">SQL语句</param>
            <param name="callback">回调，接受IDataReader作为参数，返回T类型的结果</param>
            <returns>T</returns>
        </member>
        <member name="M:Arch.Data.BaseDao.VisitDataReader``1(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Func{System.Data.IDataReader,``0})">
            <summary>
            执行查询语句，并返回指定的结果（连接会确认被释放，安全）
            </summary>
            <typeparam name="T">返回值的类型</typeparam>
            <param name="sql">SQL语句</param>
            <param name="parameters">查询参数</param>
            <param name="callback">回调，接受IDataReader作为参数，返回T类型的结果</param>
            <returns>T</returns>
        </member>
        <member name="M:Arch.Data.BaseDao.VisitDataReader``1(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary,System.Func{System.Data.IDataReader,``0})">
            <summary>
            执行查询语句，并返回指定的结果（连接会确认被释放，安全）
            </summary>
            <typeparam name="T">返回值的类型</typeparam>
            <param name="sql">SQL语句</param>
            <param name="parameters">查询参数</param>
            <param name="hints">指令扩展属性</param>
            <param name="callback">回调，接受IDataReader作为参数，返回T类型的结果</param>
            <returns>T</returns>
        </member>
        <member name="M:Arch.Data.BaseDao.VisitDataReader``1(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType,System.Func{System.Data.IDataReader,``0})">
            <summary>
            执行查询语句，并返回指定的结果（连接会确认被释放，安全）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">sql语句</param>
            <param name="parameters">查询参数</param>
            <param name="hints">指令扩展属性</param>
            <param name="operationType">操作类型，读写分离，默认从master库读取</param>
            <param name="callback">回调，接受IDataReader作为参数，返回T类型的结果</param>
            <returns>T</returns>
        </member>
        <member name="M:Arch.Data.BaseDao.SelectDataTable(System.String)">
            <summary>
            执行查询语句
            </summary>
            <param name="sql">sql语句</param>
            <returns>DataTable</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.SelectDataTable(System.String,Arch.Data.DbEngine.StatementParameterCollection)">
            <summary>
            执行查询语句
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameters">查询参数</param>
            <returns>DataTable</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.SelectDataTable(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary)">
            <summary>
             执行查询语句
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameters">查询参数</param>
            <param name="hints">指令的扩展属性</param>
            <returns>DataTable</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.SelectDataTable(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType)">
            <summary>
            执行查询语句
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameters">查询参数</param>
            <param name="hints">指令的扩展属性 </param>
            <param name="operationType">操作类型，读写分离，默认从master库读取</param>
            <returns>DataTable</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.SelectDataSet(System.String)">
            <summary>
            执行查询
            </summary>
            <param name="sql">sql语句</param>
            <returns>DataSet</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.SelectDataSet(System.String,Arch.Data.DbEngine.StatementParameterCollection)">
            <summary>
            执行查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameters">查询参数</param>
            <returns>DataSet</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.SelectDataSet(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary)">
            <summary>
            执行查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameters">查询参数</param>
            <param name="hints">指令的扩展属性</param>
            <returns>DataSet</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.SelectDataSet(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType)">
            <summary>
            
            </summary>
            <param name="sql">SQL语句</param>
            <param name="parameters">查询参数</param>
            <param name="hints">指令的扩展属性</param>
            <param name="operationType">操作类型，读写分离，默认从master库读取</param>
            <returns>DataSet</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.SelectDataSet``1(Arch.Data.Orm.IQuery)">
            <summary>
            通过dataset查询
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="query">查询对象</param>
            <returns>DataSet</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.SelectDataSet``1(Arch.Data.Orm.IQuery,System.Collections.IDictionary)">
            <summary>
            通过dataset查询
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="query">查询对象</param>
            <param name="hints">指令参数：如timeout</param>
            <returns>DataSet</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.SelectDataSet``1(Arch.Data.Orm.IQuery,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType)">
            <summary>
            通过dataset查询
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="query">查询对象</param>
            <param name="hints">指令参数：如timeout </param>
            <param name="operationType">操作类型，读写分离，默认从master库读取</param>
            <returns>DataSet</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.ExecScalarBySp(System.String,Arch.Data.DbEngine.StatementParameterCollection)">
            <summary>
            执行单返回值聚集查询指令
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">查询参数</param>
            <returns>object, 返回存储过程执行结果的第一行第一列，如果存储过程执行结果为0行，则返回null。</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.ExecScalarBySp(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary)">
            <summary>
            执行单返回值聚集查询指令
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">查询参数</param>
            <param name="hints">指令参数：如timeout</param>
            <returns>object, 返回存储过程执行结果的第一行第一列，如果存储过程执行结果为0行，则返回null。</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.ExecScalarBySp(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType)">
            <summary>
            执行单返回值聚集查询指令
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">查询参数</param>
            <param name="hints">指令参数：如timeout</param>
            <param name="operationType">操作类型，读写分离，默认从master库读取</param>
            <returns>object, 返回存储过程执行结果的第一行第一列，如果存储过程执行结果为0行，则返回null。</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.ExecSp(System.String,Arch.Data.DbEngine.StatementParameterCollection)">
            <summary>
            执行存储过程
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameters">查询参数</param>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.ExecSp(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary)">
            <summary>
            执行存储过程
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameters">查询参数</param>
            <param name="hints">指令参数：如timeout</param>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.ExecSp(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType)">
            <summary>
            执行存储过程
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameters">查询参数</param>
            <param name="hints"> 指令参数：如timeout</param>
            <param name="operationType">操作类型，读写分离，默认从master库读取</param>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.ExecListBySp``1(System.String,Arch.Data.DbEngine.StatementParameterCollection)">
            <summary>
            执行查询存储过程
            </summary>
            <typeparam name="T">结果类型</typeparam>
            <param name="procName">存储过程名称</param>
            <param name="parameters">存储过程参数</param>
            <returns>对象集合</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.ExecListBySp``1(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary)">
            <summary>
            执行查询存储过程
            </summary>
            <typeparam name="T">结果类型</typeparam>
            <param name="procName">存储过程名称</param>
            <param name="parameters">存储过程参数</param>
            <param name="hints">指令参数：如timeout</param>
            <returns>对象集合</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.ExecListBySp``1(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType)">
            <summary>
            执行查询存储过程
            </summary>
            <typeparam name="T">结果类型</typeparam>
            <param name="procName">存储过程名称</param>
            <param name="parameters">存储过程参数</param>
            <param name="hints">指令参数：如timeout</param>
            <param name="operationType">操作类型，读写分离，默认从master库读取</param>
            <returns>对象集合</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.ExecDataSetBySp(System.String,Arch.Data.DbEngine.StatementParameterCollection)">
            <summary>
            通过存储过程执行dataset
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameters">全部存储过程参数</param>
            <returns>DataSet</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.ExecDataSetBySp(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary)">
            <summary>
            通过存储过程执行dataset
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameters">查询参数</param>
            <param name="hints">指令参数：如timeout</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Arch.Data.BaseDao.ExecDataSetBySp(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType)">
            <summary>
            通过存储过程执行dataset
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameters">存储过程参数</param>
            <param name="hints">指令参数：如timeout </param>
            <param name="operationType">操作类型，读写分离，默认从master库读取</param>
            <returns>dataset</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.ExecDataTableBySp(System.String,Arch.Data.DbEngine.StatementParameterCollection)">
            <summary>
            通过存储过程执行DataTable
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameters">全部存储过程参数</param>
            <returns>DataTable</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.ExecDataTableBySp(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary)">
            <summary>
            通过存储过程执行DataTable
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameters">全部存储过程参数</param>
            <param name="hints">指令参数：如timeout</param>
            <returns>DataTable</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.ExecDataTableBySp(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType)">
            <summary>
             通过存储过程执行DataTable
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameters">全部存储过程参数</param>
            <param name="hints">指令参数：如timeout</param>
            <param name="operationType">操作类型，读写分离，默认从master库读取</param>
            <returns>DataTable</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.ExecDataReaderBySp(System.String,Arch.Data.DbEngine.StatementParameterCollection)">
            <summary>
            通过存储过程执行DataReader
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameters">存储过程参数</param>
            <returns>DataReader</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.ExecDataReaderBySp(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary)">
            <summary>
            通过存储过程执行DataReader
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameters">存储过程参数</param>
            <param name="hints">指令参数：如timeout</param>
            <returns>IDataReader</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.ExecDataReaderBySp(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType)">
            <summary>
            通过存储过程执行DataReader
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameters">存储过程参数</param>
            <param name="hints">指令参数：如timeout</param>
            <param name="operationType">操作类型，读写分离，默认从master库读取</param>
            <returns>IDataReader</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.VisitDataReaderBySp``1(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Func{System.Data.IDataReader,``0})">
            <summary>
            通过存储过程执行DataReader，并返回结果（null，0或者指定的结果类型）
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="procName">存储过程名称</param>
            <param name="parameters">存储过程参数</param>
            <param name="callback">回调，接受IDataReader为参数，返回指定的类型结果</param>
            <returns>T的实例，可能为null或者0</returns>
        </member>
        <member name="M:Arch.Data.BaseDao.VisitDataReaderBySp``1(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary,System.Func{System.Data.IDataReader,``0})">
            <summary>
            通过存储过程执行DataReader，并返回结果（null，0或者指定的结果类型）
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="procName">存储过程名称</param>
            <param name="parameters">存储过程参数</param>
            <param name="hints">指令参数：如timeout</param>
            <param name="callback">回调，接受IDataReader为参数，返回指定的类型结果</param>
            <returns>T的实例，可能为null或者0</returns>
        </member>
        <member name="M:Arch.Data.BaseDao.VisitDataReaderBySp``1(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType,System.Func{System.Data.IDataReader,``0})">
            <summary>
            通过存储过程执行DataReader，并返回结果（null，0或者指定的结果类型）
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="procName">存储过程名称</param>
            <param name="parameters">存储过程参数</param>
            <param name="hints">指令参数：如timeout</param>
            <param name="operationType">操作类型，读写分离，默认从master库读取</param>
            <param name="callback">回调，接受IDataReader为参数，返回指定的类型结果</param>
            <returns>T的实例，可能为null或者0</returns>
        </member>
        <member name="M:Arch.Data.BaseDao.ExecScalar(System.String)">
            <summary>
            执行单返回值聚集查询指令
            </summary>
            <param name="sql">sql语句</param>
            <returns>object</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.ExecScalar(System.String,Arch.Data.DbEngine.StatementParameterCollection)">
            <summary>
            执行单返回值聚集查询指令
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameters">查询参数</param>
            <returns>object</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.ExecScalar(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary)">
            <summary>
            执行单返回值聚集查询指令
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameters">查询参数</param>
            <param name="hints">指令参数：如timeout</param>
            <returns>object</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.ExecScalar(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType)">
            <summary>
            执行单返回值聚集查询指令
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameters">查询参数</param>
            <param name="hints">指令参数：如timeout</param>
            <param name="operationType">操作类型，读写分离，默认从master库读取</param>
            <returns>object</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.ExecNonQuery(System.String)">
            <summary>
            执行非查询指令
            </summary>
            <param name="sql">sql语句</param>
            <returns>影响行数</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.ExecNonQuery(System.String,Arch.Data.DbEngine.StatementParameterCollection)">
            <summary>
            执行非查询指令
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameters">查询参数</param>
            <returns>影响行数</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.ExecNonQuery(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary)">
            <summary>
            执行非查询指令
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameters">查询参数</param>
            <param name="hints">指令参数：如timeout</param>
            <returns>影响行数</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.BaseDao.ExecNonQuery(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType)">
            <summary>
            执行非查询指令
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameters">查询参数</param>
            <param name="hints">指令参数：如timeout</param>
            <param name="operationType">操作类型，读写分离，默认从master库读取</param>
            <returns>影响行数</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="P:Arch.Data.BaseDao.ShardingStrategy">
             <summary>
            当前的分片策略， 使用ShardingStrategy时，需要确保已经指定了逻辑数据库名，即 new BaseDao("逻辑数据库名");
             </summary>
        </member>
        <member name="M:Arch.Data.IDialectDao.BulkReplace``1(System.Collections.Generic.IList{``0})">
            <summary>
            批量替换对象
            <example><para>示例：</para>
            <code>
            <para>
              readonly BaseDao baseDao = BaseDaoFactory.CreateBaseDao("your databaseSetName");
              List( &lt; UserPrizeDrawedResultsEntity  &gt; list = new List &lt; UserPrizeDrawedResultsEntity &gt;();
              UserPrizeDrawedResultsEntity item = null;
              for (int i = 0; i  &lt; 100; i++)
              {
                   item = new UserPrizeDrawedResultsEntity();
                   item.PrizeDrawTime ="test";
                   item.PrizeInfoID = "test";
                   item.PrizeActivityId = "test";
                   item.Uid = "test";
                   list.Add(item);
               }
              baseDao.BulkReplace(list);</para>
            </code>
            </example>
            <remarks>
            <para>备注:</para>
            <para> 1.batchSize最大10000，建议100，分批替换。</para> 
            <para> 2.该批量替换推荐在mysql中使用，如果MsSQL推荐用表变量方式处理</para> 
            </remarks>
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="list">对象集合</param>
            <returns>是否成功</returns>
            <exception cref="T:Arch.Data.DalException">数据访问异常</exception>
        </member>
        <member name="M:Arch.Data.IDialectDao.BulkReplace``1(System.Collections.Generic.IList{``0},System.Collections.IDictionary)">
            <summary>
            批量替换对象
            <example><para>示例：</para>
            <code>
            <para>
              readonly BaseDao baseDao = BaseDaoFactory.CreateBaseDao("your databaseSetName");
              List( &lt; UserPrizeDrawedResultsEntity  &gt; list = new List &lt; UserPrizeDrawedResultsEntity &gt;();
              IDictionary statementParams = new  new Hashtable();
              statementParams.Add(DALExtStatementConstant.TIMEOUT, "1000");
              UserPrizeDrawedResultsEntity item = null;
              for (int i = 0; i  &lt; 100; i++)
              {
                   item = new UserPrizeDrawedResultsEntity();
                   item.PrizeDrawTime ="test";
                   item.PrizeInfoID = "test";
                   item.PrizeActivityId = "test";
                   item.Uid = "test";
                   list.Add(item);
               }
              baseDao.BulkReplace(list);</para>
            </code>
            </example>
            <remarks>
            <para>备注:</para>
            <para> 1.batchSize最大10000，建议100，分批替换。</para> 
            <para> 2.该批量替换推荐在mysql中使用，如果MsSQL推荐用表变量方式处理</para> 
            <para> 3.扩展属性的key，具体可以查询DALExtStatementConstant的常量列表（譬如：timeout等）</para> 
            </remarks>
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="list">对象集合</param>
            <param name="hints">扩展属性，譬如:timeout等</param>
            <returns>是否成功</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IDialectDao.BulkReplace``1(System.String,System.Collections.Generic.IList{``0},System.Collections.IDictionary)">
            <summary>
            批量替换对象,batchSize：100
            <example><para>示例：</para>
            <code>
            <para>
              readonly BaseDao baseDao = BaseDaoFactory.CreateBaseDao("your databaseSetName");
              List( &lt; UserPrizeDrawedResultsEntity  &gt; list = new List &lt; UserPrizeDrawedResultsEntity &gt;();
              IDictionary statementParams = new  new Hashtable();
              statementParams.Add(DALExtStatementConstant.TIMEOUT, "1000");
              UserPrizeDrawedResultsEntity item = null;
              for (int i = 0; i  &lt; 100; i++)
              {
                   item = new UserPrizeDrawedResultsEntity();
                   item.PrizeDrawTime ="test";
                   item.PrizeInfoID = "test";
                   item.PrizeActivityId = "test";
                   item.Uid = "test";
                   list.Add(item);
               }
              baseDao.BulkInsert(list);</para>
            </code>
            </example>
            <remarks>
            <para>备注:批量替换对象</para>
            <para> 1.batchSize最大10000，建议100，分批插入。</para> 
            <para> 2.该批量替换推荐在mysql中使用，如果MsSQL推荐用表变量方式处理</para> 
            <para> 3.扩展属性的key，具体可以查询DALExtStatementConstant的常量列表（譬如：timeout等）</para>
            <para> 4.可以通过指定的逻辑数据库名插入数据，也就是一个dao(数据访问对象)支持多个数据库连接</para> 
            </remarks>
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="logicDbName">逻辑数据库名</param>
            <param name="list">对象集合</param>
            <param name="hints">扩展属性，譬如:timeout等 </param>
            <returns>是否成功</returns>
            <remarks>1.集合对象不能超过10000, 2.SQLServer参数不能超过2100, Mysql控制报文最大长度</remarks>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IDialectDao.Replace``1(``0)">
            <summary>
            替换对象 
            <example><para>示例：</para>
            <code>
            readonly BaseDao baseDao = BaseDaoFactory.CreateBaseDao("your databaseSetName");
             City c = new City
                            {
                                Name = "test",
                                Population = "test",
                               Country1Code = "test",
                                District = "test"
                            };
            baseDao.Replace(city);
            </code>
            </example>
            <remarks>
            <para>备注:</para>
            <para> 1.实体类打上了[ID]这个标签，替换成功将返回新增的主键值</para> 
            <para> 2.实体类打上了[PK]这个标签，(替换成功将返回新增的主键值，如果PK不为ID，则返回影响条数)</para> 
            </remarks>
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="obj">实体对象</param>
            <returns>返回第一列值（譬如自增长ID）</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IDialectDao.Replace``1(``0,System.Collections.IDictionary)">
            <summary>
            替换对象
            <example><para>示例：</para>
            <code>
            readonly BaseDao baseDao = BaseDaoFactory.CreateBaseDao("your databaseSetName");
             City c = new City
                            {
                                Name = "test",
                                Population = "test",
                                Country1Code = "test",
                                District = "test"
                            };
             IDictionary statementParams = new  new Hashtable();
             statementParams.Add(DALExtStatementConstant.TIMEOUT, "1000");
             baseDao.Replace(city,statementParams);
            </code>
            </example>
            <remarks>
            <para>备注:</para>
            <para> 1.实体类打上了[ID]这个标签，替换成功将返回新增的主键值</para> 
            <para> 2.实体类打上了[PK]这个标签，(替换成功将返回新增的主键值，如果PK不为ID，则返回影响条数)</para> 
            <para> 3.扩展属性的key，具体可以查询DALExtStatementConstant的常量列表（譬如：timeout等）</para> 
            </remarks>
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="obj">实体对象</param>
            <param name="hints">指令扩展属性（分片：shardcol,超时:timeout）</param>
            <returns>返回第一列值（譬如自增长ID）</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IDialectDao.Replace``1(System.String,``0,System.Collections.IDictionary)">
            <summary>
            替换对象
            <example><para>示例：</para>
            <code>
             readonly BaseDao baseDao = BaseDaoFactory.CreateBaseDao("your databaseSetName");<br/>
             City c = new City
                            {
                                Name = "test",
                                Population = "test",
                                Country1Code = "test",
                                District = "test"
                            };
             IDictionary statementParams = new  new Hashtable();
             statementParams.Add(DALExtStatementConstant.TIMEOUT, "1000");
             baseDao.Replace("yourdatabaseSetName",city,statementParams);
            </code>
            </example>
            <remarks>
            <para>备注:</para>
            <para> 1.实体类打上了[ID]这个标签，替换成功将返回新增的主键值</para> 
            <para> 2.实体类打上了[PK]这个标签，(替换成功将返回新增的主键值，如果PK不为ID，则返回影响条数)</para> 
            <para> 3.扩展属性的key，具体可以查询DALExtStatementConstant的常量列表（譬如：timeout等）</para> 
            <para> 4.可以通过指定的逻辑数据库名插入数据，也就是一个dao(数据访问对象)支持多个数据库连接</para> 
            </remarks>
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="logicDbName">逻辑数据库名</param>
            <param name="obj">实体对象</param>
            <param name="hints">指令扩展属性（分片：shardcol,超时:timeout） </param>
            <returns>返回第一列值（譬如自增长ID）</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IDialectDao.ReplacePartially``1(Arch.Data.Orm.partially.IReplacePartial{``0},``0)">
            <summary>
            部分替换
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="replacePartial">IReplacePartial 对象</param>
            <param name="obj">实体对象</param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.IDialectDao.ReplacePartially``1(Arch.Data.Orm.partially.IReplacePartial{``0},``0,System.Collections.IDictionary)">
            <summary>
            部分替换
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="replacePartial">IReplacePartial 对象</param>
            <param name="obj">实体对象</param>
            <param name="hints">扩展参数(Hints)</param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.IDialectDao.ReplacePartially``1(System.String,Arch.Data.Orm.partially.IReplacePartial{``0},``0,System.Collections.IDictionary)">
            <summary>
            部分替换
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="logicDbName">DatabaseSet 名称</param>
            <param name="replacePartial">IReplacePartial 对象</param>
            <param name="obj">实体对象</param>
            <param name="hints">扩展参数(Hints)</param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.IDialectDao.GetReplacePartially``1">
            <summary>
            获取 ReplacePartially 对象
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.MySqlDialectDao.#ctor(System.String)">
            <summary>
            SqlTable
            </summary>
        </member>
        <member name="M:Arch.Data.MySqlDialectDao.BulkReplace``1(System.Collections.Generic.IList{``0})">
            <summary>
            批量替换对象
            <example><para>示例：</para>
            <code>
            <para>
              readonly BaseDao baseDao = BaseDaoFactory.CreateBaseDao("your databaseSetName");
              List( &lt; UserPrizeDrawedResultsEntity  &gt; list = new List &lt; UserPrizeDrawedResultsEntity &gt;();
              UserPrizeDrawedResultsEntity item = null;
              for (int i = 0; i  &lt; 100; i++)
              {
                   item = new UserPrizeDrawedResultsEntity();
                   item.PrizeDrawTime ="test";
                   item.PrizeInfoID = "test";
                   item.PrizeActivityId = "test";
                   item.Uid = "test";
                   list.Add(item);
               }
              baseDao.BulkReplace(list);</para>
            </code>
            </example>
            <remarks>
            <para>备注:</para>
            <para> 1.batchSize最大10000，建议100，分批替换。</para> 
            <para> 2.该批量替换推荐在mysql中使用，如果MsSQL推荐用表变量方式处理</para> 
            </remarks>
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="list">对象集合</param>
            <returns>是否成功</returns>
            <exception cref="T:Arch.Data.DalException">数据访问异常</exception>
        </member>
        <member name="M:Arch.Data.MySqlDialectDao.BulkReplace``1(System.Collections.Generic.IList{``0},System.Collections.IDictionary)">
            <summary>
            批量替换对象
            <example><para>示例：</para>
            <code>
            <para>
              readonly BaseDao baseDao = BaseDaoFactory.CreateBaseDao("your databaseSetName");
              List( &lt; UserPrizeDrawedResultsEntity  &gt; list = new List &lt; UserPrizeDrawedResultsEntity &gt;();
              IDictionary statementParams = new  new Hashtable();
              statementParams.Add(DALExtStatementConstant.TIMEOUT, "1000");
              UserPrizeDrawedResultsEntity item = null;
              for (int i = 0; i  &lt; 100; i++)
              {
                   item = new UserPrizeDrawedResultsEntity();
                   item.PrizeDrawTime ="test";
                   item.PrizeInfoID = "test";
                   item.PrizeActivityId = "test";
                   item.Uid = "test";
                   list.Add(item);
               }
              baseDao.BulkReplace(list);</para>
            </code>
            </example>
            <remarks>
            <para>备注:</para>
            <para> 1.batchSize最大10000，建议100，分批替换。</para> 
            <para> 2.该批量替换推荐在mysql中使用，如果MsSQL推荐用表变量方式处理</para> 
            <para> 3.扩展属性的key，具体可以查询DALExtStatementConstant的常量列表（譬如：timeout等）</para> 
            </remarks>
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="list">对象集合</param>
            <param name="hints">扩展属性，譬如:timeout等</param>
            <returns>是否成功</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.MySqlDialectDao.BulkReplace``1(System.String,System.Collections.Generic.IList{``0},System.Collections.IDictionary)">
            <summary>
            批量替换对象,batchSize：100
            <example><para>示例：</para>
            <code>
            <para>
              readonly BaseDao baseDao = BaseDaoFactory.CreateBaseDao("your databaseSetName");
              List( &lt; UserPrizeDrawedResultsEntity  &gt; list = new List &lt; UserPrizeDrawedResultsEntity &gt;();
              IDictionary statementParams = new  new Hashtable();
              statementParams.Add(DALExtStatementConstant.TIMEOUT, "1000");
              UserPrizeDrawedResultsEntity item = null;
              for (int i = 0; i  &lt; 100; i++)
              {
                   item = new UserPrizeDrawedResultsEntity();
                   item.PrizeDrawTime ="test";
                   item.PrizeInfoID = "test";
                   item.PrizeActivityId = "test";
                   item.Uid = "test";
                   list.Add(item);
               }
              baseDao.BulkReplace(list);</para>
            </code>
            </example>
            <remarks>
            <para>备注:批量替换对象</para>
            <para> 1.batchSize最大10000，建议100，分批插入。</para> 
            <para> 2.该批量替换推荐在mysql中使用，如果MsSQL推荐用表变量方式处理</para> 
            <para> 3.扩展属性的key，具体可以查询DALExtStatementConstant的常量列表（譬如：timeout等）</para>
            <para> 4.可以通过指定的逻辑数据库名插入数据，也就是一个dao(数据访问对象)支持多个数据库连接</para> 
            </remarks>
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="logicDbName">逻辑数据库名</param>
            <param name="list">对象集合</param>
            <param name="hints">扩展属性，譬如:timeout等 </param>
            <returns>是否成功</returns>
            <remarks>1.集合对象不能超过10000, 2.SQLServer参数不能超过2100, Mysql控制报文最大长度</remarks>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.MySqlDialectDao.Replace``1(``0)">
            <summary>
            替换对象 
            <example><para>示例：</para>
            <code>
            readonly BaseDao baseDao = BaseDaoFactory.CreateBaseDao("your databaseSetName");
             City c = new City
                            {
                                Name = "test",
                                Population = "test",
                               Country1Code = "test",
                                District = "test"
                            };
            baseDao.Replace(city);
            </code>
            </example>
            <remarks>
            <para>备注:</para>
            <para> 1.实体类打上了[ID]这个标签，替换成功将返回新增的主键值</para> 
            <para> 2.实体类打上了[PK]这个标签，(替换成功将返回新增的主键值，如果PK不为ID，则返回影响条数)</para> 
            </remarks>
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="obj">实体对象</param>
            <returns>返回第一列值（譬如自增长ID）</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.MySqlDialectDao.Replace``1(``0,System.Collections.IDictionary)">
            <summary>
            替换对象
            <example><para>示例：</para>
            <code>
            readonly BaseDao baseDao = BaseDaoFactory.CreateBaseDao("your databaseSetName");
             City c = new City
                            {
                                Name = "test",
                                Population = "test",
                                Country1Code = "test",
                                District = "test"
                            };
             IDictionary statementParams = new  new Hashtable();
             statementParams.Add(DALExtStatementConstant.TIMEOUT, "1000");
             baseDao.Replace(city,statementParams);
            </code>
            </example>
            <remarks>
            <para>备注:</para>
            <para> 1.实体类打上了[ID]这个标签，替换成功将返回新增的主键值</para> 
            <para> 2.实体类打上了[PK]这个标签，(替换成功将返回新增的主键值，如果PK不为ID，则返回影响条数)</para> 
            <para> 3.扩展属性的key，具体可以查询DALExtStatementConstant的常量列表（譬如：timeout等）</para> 
            </remarks>
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="obj">实体对象</param>
            <param name="hints">指令扩展属性（分片：shardcol,超时:timeout）</param>
            <returns>返回第一列值（譬如自增长ID）</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.MySqlDialectDao.Replace``1(System.String,``0,System.Collections.IDictionary)">
            <summary>
            替换对象
            <example><para>示例：</para>
            <code>
             readonly BaseDao baseDao = BaseDaoFactory.CreateBaseDao("your databaseSetName");<br/>
             City c = new City
                            {
                                Name = "test",
                                Population = "test",
                                Country1Code = "test",
                                District = "test"
                            };
             IDictionary statementParams = new  new Hashtable();
             statementParams.Add(DALExtStatementConstant.TIMEOUT, "1000");
             baseDao.Replace("yourdatabaseSetName",city,statementParams);
            </code>
            </example>
            <remarks>
            <para>备注:</para>
            <para> 1.实体类打上了[ID]这个标签，替换成功将返回新增的主键值</para> 
            <para> 2.实体类打上了[PK]这个标签，(替换成功将返回新增的主键值，如果PK不为ID，则返回影响条数)</para> 
            <para> 3.扩展属性的key，具体可以查询DALExtStatementConstant的常量列表（譬如：timeout等）</para> 
            <para> 4.可以通过指定的逻辑数据库名插入数据，也就是一个dao(数据访问对象)支持多个数据库连接</para> 
            </remarks>
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="logicDbName">逻辑数据库名</param>
            <param name="obj">实体对象</param>
            <param name="hints">指令扩展属性（分片：shardcol,超时:timeout） </param>
            <returns>返回第一列值（譬如自增长ID）</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.MySqlDialectDao.ReplacePartially``1(Arch.Data.Orm.partially.IReplacePartial{``0},``0)">
            <summary>
            部分替换
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="replacePartial">IReplacePartial 对象</param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.MySqlDialectDao.ReplacePartially``1(Arch.Data.Orm.partially.IReplacePartial{``0},``0,System.Collections.IDictionary)">
            <summary>
            部分替换
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="replacePartial">IReplacePartial 对象</param>
            <param name="obj"></param>
            <param name="hints"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.MySqlDialectDao.ReplacePartially``1(System.String,Arch.Data.Orm.partially.IReplacePartial{``0},``0,System.Collections.IDictionary)">
            <summary>
            部分替换
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="logicDbName">DatabaseSet 名称</param>
            <param name="replacePartial">IReplacePartial 对象</param>
            <param name="obj"></param>
            <param name="hints"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.MySqlDialectDao.GetReplacePartially``1">
            <summary>
            获取 ReplacePartially 对象 
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="P:Arch.Data.MySqlDialectDao.LogicDbName">
            <summary>
            Database Set name
            </summary>
        </member>
        <member name="F:Arch.Data.DbEngine.Configuration.AppInternalsElement.c_NameProperty">
            <summary>
            名称
            </summary>
        </member>
        <member name="F:Arch.Data.DbEngine.Configuration.AppInternalsElement.c_TypeProperty">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.Configuration.AppInternalsElement.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.Configuration.AppInternalsElement.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.Configuration.AppInternalsElement.TypeName">
            <summary>
            类型
            </summary>
        </member>
        <member name="F:Arch.Data.DbEngine.Configuration.AppInternalsElementCollection.s_Properties">
            <summary>
            属性集合
            </summary>
        </member>
        <member name="M:Arch.Data.DbEngine.Configuration.AppInternalsElementCollection.#cctor">
            <summary>
            静态构造方法
            </summary>
        </member>
        <member name="F:Arch.Data.DbEngine.Configuration.ConnectionLocatorElement.c_NameProperty">
            <summary>
            名称
            </summary>
        </member>
        <member name="F:Arch.Data.DbEngine.Configuration.ConnectionLocatorElement.c_TypeProperty">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.Configuration.ConnectionLocatorElement.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.Configuration.ConnectionLocatorElement.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.Configuration.ConnectionLocatorElement.TypeName">
            <summary>
            类型
            </summary>
        </member>
        <member name="F:Arch.Data.DbEngine.Configuration.ConnectionLocatorElementCollection.s_Properties">
            <summary>
            属性集合
            </summary>
        </member>
        <member name="M:Arch.Data.DbEngine.Configuration.ConnectionLocatorElementCollection.#cctor">
            <summary>
            静态构造方法
            </summary>
        </member>
        <member name="T:Arch.Data.DbEngine.Configuration.DatabaseElement">
            <summary>
            物理数据库链接配置元素
            </summary>
        </member>
        <member name="F:Arch.Data.DbEngine.Configuration.DatabaseElement.c_NameProperty">
            <summary>
            名称
            </summary>
        </member>
        <member name="F:Arch.Data.DbEngine.Configuration.DatabaseElement.c_DatabaseTypeProperty">
            <summary>
            数据库主从类型
            </summary>
        </member>
        <member name="F:Arch.Data.DbEngine.Configuration.DatabaseElement.c_ShardingProperty">
            <summary>
            分片标识
            </summary>
        </member>
        <member name="F:Arch.Data.DbEngine.Configuration.DatabaseElement.c_RatioProperty">
            <summary>
            调用权重
            </summary>
        </member>
        <member name="F:Arch.Data.DbEngine.Configuration.DatabaseElement.c_ConnectionStringProperty">
            <summary>
            链接字符串名称
            </summary>
        </member>
        <member name="F:Arch.Data.DbEngine.Configuration.DatabaseElement.c_SequenceStart">
            <summary>
            连续型sharding初始值
            </summary>
        </member>
        <member name="F:Arch.Data.DbEngine.Configuration.DatabaseElement.c_SequenceEnd">
            <summary>
            连续型sharding结束值
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.Configuration.DatabaseElement.Name">
            <summary>
            名称,关键字
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.Configuration.DatabaseElement.Ratio">
            <summary>
            从库访问权重
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.Configuration.DatabaseElement.DatabaseType">
            <summary>
            数据库主从类型
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.Configuration.DatabaseElement.Sharding">
            <summary>
            分片标识
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.Configuration.DatabaseElement.ConnectionString">
            <summary>
            链接字符串名称
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.Configuration.DatabaseElement.Start">
            <summary>
            连续型
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.Configuration.DatabaseElement.End">
            <summary>
            连续型
            </summary>
        </member>
        <member name="T:Arch.Data.DbEngine.Configuration.DatabaseElementCollection">
            <summary>
            数据库集集合
            </summary>
        </member>
        <member name="F:Arch.Data.DbEngine.Configuration.DatabaseElementCollection.s_Properties">
            <summary>
            属性集合
            </summary>
        </member>
        <member name="M:Arch.Data.DbEngine.Configuration.DatabaseElementCollection.#cctor">
            <summary>
            静态构造
            </summary>
        </member>
        <member name="T:Arch.Data.DbEngine.Configuration.DatabaseProviderElement">
            <summary>
            数据库提供者
            </summary>
        </member>
        <member name="F:Arch.Data.DbEngine.Configuration.DatabaseProviderElement.c_NameProperty">
            <summary>
            名称
            </summary>
        </member>
        <member name="F:Arch.Data.DbEngine.Configuration.DatabaseProviderElement.c_TypeProperty">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.Configuration.DatabaseProviderElement.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.Configuration.DatabaseProviderElement.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.Configuration.DatabaseProviderElement.TypeName">
            <summary>
            类型
            </summary>
        </member>
        <member name="T:Arch.Data.DbEngine.Configuration.DatabaseProviderElementCollection">
            <summary>
            数据库提供者集合
            </summary>
        </member>
        <member name="F:Arch.Data.DbEngine.Configuration.DatabaseProviderElementCollection.s_Properties">
            <summary>
            属性集合
            </summary>
        </member>
        <member name="M:Arch.Data.DbEngine.Configuration.DatabaseProviderElementCollection.#cctor">
            <summary>
            静态构造方法
            </summary>
        </member>
        <member name="T:Arch.Data.DbEngine.Configuration.DatabaseSetElement">
            <summary>
            数据库集配置元素
            </summary>
        </member>
        <member name="F:Arch.Data.DbEngine.Configuration.DatabaseSetElement.c_NameProperty">
            <summary>
            名称
            </summary>
        </member>
        <member name="F:Arch.Data.DbEngine.Configuration.DatabaseSetElement.c_ProviderProperty">
            <summary>
            提供者名称
            </summary>
        </member>
        <member name="F:Arch.Data.DbEngine.Configuration.DatabaseSetElement.c_ShardingStrategyProperty">
            <summary>
            分片策略
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.Configuration.DatabaseSetElement.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.Configuration.DatabaseSetElement.Provider">
            <summary>
            提供者名称
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.Configuration.DatabaseSetElement.Databases">
            <summary>
            数据库sharding策略配置项
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.Configuration.DatabaseSetElement.ShardingStrategy">
            <summary>
            shardStrategyClass属性 
            </summary>
        </member>
        <member name="T:Arch.Data.DbEngine.Configuration.DatabaseSetElementCollection">
            <summary>
            数据库集配置集合
            </summary>
        </member>
        <member name="F:Arch.Data.DbEngine.Configuration.DatabaseSetElementCollection.s_Properties">
            <summary>
            属性集合
            </summary>
        </member>
        <member name="M:Arch.Data.DbEngine.Configuration.DatabaseSetElementCollection.#cctor">
            <summary>
            静态构造
            </summary>
        </member>
        <member name="T:Arch.Data.DbEngine.Configuration.DbEngineConfigurationSection">
            <summary>
            数据库引擎配置节
            </summary>
        </member>
        <member name="F:Arch.Data.DbEngine.Configuration.DbEngineConfigurationSection.SectionName">
            <summary>
            Db引擎配置节名称
            </summary>
        </member>
        <member name="F:Arch.Data.DbEngine.Configuration.DbEngineConfigurationSection.m_DatabaseSets">
            <summary>
            数据库集配置集合
            </summary>
        </member>
        <member name="F:Arch.Data.DbEngine.Configuration.DbEngineConfigurationSection.m_DatabaseProviders">
            <summary>
            数据库提供者配置集合
            </summary>
        </member>
        <member name="F:Arch.Data.DbEngine.Configuration.DbEngineConfigurationSection.m_LogListeners">
            <summary>
            日志监听器配置集合
            </summary>
        </member>
        <member name="F:Arch.Data.DbEngine.Configuration.DbEngineConfigurationSection.m_Metrics">
            <summary>
            统计配置
            </summary>
        </member>
        <member name="F:Arch.Data.DbEngine.Configuration.DbEngineConfigurationSection.m_ConnectionLocator">
            <summary>
            Connection String
            </summary>
        </member>
        <member name="M:Arch.Data.DbEngine.Configuration.DbEngineConfigurationSection.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:Arch.Data.DbEngine.Configuration.DbEngineConfigurationSection.GetConfig">
            <summary>
            获取Db引擎配置节配置节
            </summary>
            <returns></returns>
        </member>
        <member name="P:Arch.Data.DbEngine.Configuration.DbEngineConfigurationSection.DatabaseSets">
            <summary>
            数据库集配置数组
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.Configuration.DbEngineConfigurationSection.DatabaseProviders">
            <summary>
            数据库提供者配置数组
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.Configuration.DbEngineConfigurationSection.LogListeners">
            <summary>
            数据库提供者配置数组
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.Configuration.DbEngineConfigurationSection.ConnectionLocator">
            <summary>
            Connection String
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.Configuration.DbEngineConfigurationSection.AppInternals">
            <summary>
            App Internals
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.Configuration.DbEngineConfigurationSection.Metrics">
            <summary>
            数据库提供者配置数组
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.Configuration.DbEngineConfigurationSection.Tracing">
            <summary>
            数据库提供者配置数组
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.Configuration.DbEngineConfigurationSection.Name">
            <summary>
            名称,关键字
            </summary>
        </member>
        <member name="T:Arch.Data.DbEngine.ConnectionWrapper">
            <summary>
            数据库链接包装器
            控制数据库链接
            </summary>
        </member>
        <member name="F:Arch.Data.DbEngine.ConnectionWrapper.m_Connection">
            <summary>
            真正的数据库链接
            </summary>
        </member>
        <member name="F:Arch.Data.DbEngine.ConnectionWrapper.m_DisposeConnection">
            <summary>
            是否释放链接
            </summary>
        </member>
        <member name="F:Arch.Data.DbEngine.ConnectionWrapper.m_Disposed">
            <summary>
            是否已释放
            </summary>
        </member>
        <member name="M:Arch.Data.DbEngine.ConnectionWrapper.#ctor(System.Data.Common.DbConnection,System.Boolean)">
            <summary>
            构造方法
            </summary>
            <param name="connection">数据库链接</param>
            <param name="disposeConnection">是否释放链接</param>
        </member>
        <member name="M:Arch.Data.DbEngine.ConnectionWrapper.Dispose(System.Boolean)">
            <summary>
            释放链接
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.ConnectionWrapper.Connection">
            <summary>
            数据库链接
            </summary>
        </member>
        <member name="M:Arch.Data.DbEngine.DALBootstrap.LoadDalConfig">
            <summary>
            第一步，从Web.config或者App.config中读取Dal.config文件结构
            </summary>
        </member>
        <member name="M:Arch.Data.DbEngine.DALBootstrap.LoadDbProviders">
            <summary>
            第二步，获取所有dbProviders
            </summary>
        </member>
        <member name="M:Arch.Data.DbEngine.DALBootstrap.LoadAllInOneKeys">
            <summary>
            第三步，从Dal.config中，获取所有All In One的Key列表
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.DALBootstrap.Instance">
            <summary>
            单例实例
            </summary>
        </member>
        <member name="M:Arch.Data.DbEngine.DataSourceNames.GetNames">
            <summary>
            用于提供数据源名称，CFX将根据该名称获取相应的连接字符串信息
            </summary>
        </member>
        <member name="M:Arch.Data.DbEngine.DatabaseBridge.ExecuteDataSet(Arch.Data.DbEngine.Statement,System.String[])">
            <summary>
            根据Statement，返回DataSet结果集
            </summary>
            <param name="statement"></param>
            <param name="tableNames"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.DbEngine.DatabaseBridge.ExecuteNonQuery(Arch.Data.DbEngine.Statement)">
            <summary>
            根据Statement,执行增删改操作
            </summary>
            <param name="statement"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.DbEngine.DatabaseBridge.ExecuteReader(Arch.Data.DbEngine.Statement)">
            <summary>
            根据Statement，返回IDataReader形式的结果集
            </summary>
            <param name="statement"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.DbEngine.DatabaseBridge.ExecuteScalar(Arch.Data.DbEngine.Statement)">
            <summary>
            根据Statement，返回第一行第一列
            </summary>
            <param name="statement"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.DbEngine.DatabaseBridge.ExecuteReaderWithoutLog(Arch.Data.DbEngine.Statement)">
            <summary>
            根据Statement，返回IDataReader形式的结果集，且不记录日志
            </summary>
            <param name="statement"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.DbEngine.DatabaseBridge.ExecuteScalarWithoutLog(Arch.Data.DbEngine.Statement)">
            <summary>
            根据Statement，返回第一行第一列，且不记录日志
            </summary>
            <param name="statement"></param>
            <returns></returns>
        </member>
        <member name="F:Arch.Data.DbEngine.DatabaseSetWrapper.m_TotalRatios">
            <summary>
            从数据库分片权重
            </summary>
        </member>
        <member name="F:Arch.Data.DbEngine.DatabaseSetWrapper.m_DatabaseWrappers">
            <summary>
            数据库列表
            </summary>
        </member>
        <member name="F:Arch.Data.DbEngine.DatabaseSetWrapper.AllShards">
            <summary>
            分片列表
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.DatabaseSetWrapper.Name">
            <summary>
            数据集名称
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.DatabaseSetWrapper.ProviderType">
            <summary>
            数据集提供者类型
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.DatabaseSetWrapper.EnableReadWriteSpliding">
            <summary>
            是否支持读写分离
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.DatabaseSetWrapper.ShardingStrategy">
            <summary>
            Sharding策略
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.DatabaseSetWrapper.TotalRatios">
            <summary>
            从数据库分片权重
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.DatabaseSetWrapper.DatabaseWrappers">
            <summary>
            数据库列表
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.DatabaseWrapper.Name">
            <summary>
            物理数据库名称
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.DatabaseWrapper.DatabaseType">
            <summary>
            数据库主从类型
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.DatabaseWrapper.Sharding">
            <summary>
            分片标识
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.DatabaseWrapper.Ratio">
            <summary>
            读权重
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.DatabaseWrapper.RatioStart">
            <summary>
            读权重起始值
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.DatabaseWrapper.RatioEnd">
            <summary>
            读权重结束值
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.DatabaseWrapper.ConnectionString">
            <summary>
            连接字符串
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.DatabaseWrapper.DatabaseProvider">
            <summary>
            Driver Provider类型
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.DatabaseWrapper.Database">
            <summary>
            数据库
            </summary>
        </member>
        <member name="T:Arch.Data.DbEngine.DB.OperationalDatabases">
            <summary>
            一次数据库操作，牵涉到的所有Database对象
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.DB.OperationalDatabases.FirstCandidate">
            <summary>
            优先在此Database上进行数据库操作
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.DB.OperationalDatabases.OtherCandidates">
            <summary>
            备选Databse，按照优先级从高到低
            </summary>
        </member>
        <member name="T:Arch.Data.DbEngine.EncryptDecryptHelper">
            <summary>
            采用反射方式调用加解密方法
            好处：DAL不需要额外引入DLL，且开发环境调试时，没有加解密也能工作
            缺点：如果忘记引用加解密DLL，出错都不好发现
            </summary>
        </member>
        <member name="M:Arch.Data.DbEngine.EncryptDecryptHelper.DecryptIt(System.String)">
            <summary>
            解密链接字符串
            </summary>
            <param name="stringToDecrypt">链接字符串</param>
            <returns>解密后的链接字符串</returns>
        </member>
        <member name="M:Arch.Data.DbEngine.HA.HaFactory.GetInstance(System.String)">
            <summary>
            获取HA对象
            </summary>
            <param name="logicDbName"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.DbEngine.MarkDown.AutoMarkDown.AutoMarkDownADatabase(System.String,System.String)">
            <summary>
            自动mark down,怎么区分？
            </summary>
            <param name="allInOneKey"></param>
        </member>
        <member name="M:Arch.Data.DbEngine.MarkDown.AutoMarkDown.DatabaseMarkingUp(System.String)">
            <summary>
            当前all in one key是否在Mark Up过程中
            </summary>
            <param name="allInOneKey"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.DbEngine.MarkDown.AutoMarkDown.DatabaseMarkedDown(System.String,System.String)">
            <summary>
            当前数据库是否被Mark Down了，如果在Pre Mark Up阶段，且当前请求满足放行条件，则仍然返回false
            </summary>
            <param name="allInOneKey"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.DbEngine.MarkDown.MarkDownFactory.GetMarkDownInstance(System.String)">
            <summary>
            获取HA对象
            </summary>
            <param name="logicDbName"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.DbEngine.MarkDown.MarkDownSampling.Initialize">
            <summary>
            从外界清空计数器，目前仅在需要Mark Down时执行，否则，交由计数器自己执行
            </summary>
        </member>
        <member name="M:Arch.Data.DbEngine.MarkDown.MarkDownSampling.Sampling(System.Boolean,System.Int64@,System.Int64@)">
            <summary>
            计数，并检测是否需要计算，不是线程安全的
            </summary>
            <param name="isTimeoutException"></param>
            <param name="totalCount"></param>
            <param name="exceptionCount"></param>
            <returns></returns>
        </member>
        <member name="P:Arch.Data.DbEngine.MarkDown.MarkUpInfo.CurrentBatch">
            <summary>
            总的数据访问数
            </summary>
        </member>
        <member name="F:Arch.Data.DbEngine.MarkDown.TimeoutMarkDown.samplings">
             每个数据访问都进行采样，取最近的三次采样，计算期望和方差
                      
             设置一个时间周期，从某个时间点开始采样，每有一个采样发生，检测最初一个采样到当前采样的时间周期，
             如果采样到的数据，满足某种条件，则清空所有采样，并记录下来
             如果采样到的数据，不满足某种条件，则保留，并参与后续采样的期望和方差的计算
             
            如果满足条件：
                     如果期望大于1万，则不再计算方差，直接Mark Down
                     如果期望小于1万，则计算方差，方差参考值：((70%+85%+100%)*1万/3-70%*1万)^2 + ((70%+85%+100%)*1万/3-85%*1万)^2+((70%+85%+100%)*1万/3-100%*1万)^2，如果远大于参考值，暂时不Mark Down
             
            某种条件指：
                     如果过去1分钟内，有1万个以上的数据访问错误，或者1千个数据访问中，有80%的错误，则满足条件
                     
            放开条件：
                     Mark Down 5分钟后，放开10%的数据访问
                     1. 如果过去1分钟内，有1千个（1万*10%）以上的数据访问错误，或者100个数据访问中，有80%的错误（扩大10倍计算期望和方差），则再次Mark Down。
                     2. 如果不再触发Mark Down条件，则共放开30%(70%,100%)数据访问，继续进行1步骤
                     
            以上的数据部分均可调节，包括时间，比例，数量
            
        </member>
        <member name="T:Arch.Data.DbEngine.IDatabaseProvider">
            <summary>
            数据库提供者接口
            </summary>
        </member>
        <member name="M:Arch.Data.DbEngine.IDatabaseProvider.CreateConnection">
            <summary>
            创建数据库链接
            </summary>
            <returns>数据库链接</returns>
        </member>
        <member name="M:Arch.Data.DbEngine.IDatabaseProvider.CreateCommand">
            <summary>
            创建数据库指令
            </summary>
            <returns>数据库指令</returns>
        </member>
        <member name="M:Arch.Data.DbEngine.IDatabaseProvider.CreateDataAdapter">
            <summary>
            创建数据库适配器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.DbEngine.IDatabaseProvider.CreateParameterName(System.String)">
            <summary>
            将名称变为数据库相关的参数名称
            </summary>
            <param name="name">参数名称</param>
            <returns>数据库相关的参数名称</returns>
        </member>
        <member name="M:Arch.Data.DbEngine.IDatabaseProvider.DeriveParameters(System.Data.Common.DbCommand)">
            <summary>
            导出数据库指令参数
            </summary>
            <param name="command">数据库指令</param>
        </member>
        <member name="P:Arch.Data.DbEngine.IDatabaseProvider.ProviderType">
            <summary>
            数据库提供者类型
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.IDatabaseProvider.DeriveParametersSupported">
            <summary>
            是否支持参数导出
            </summary>
        </member>
        <member name="M:Arch.Data.DbEngine.Providers.OdbcDatabaseProvider.CreateConnection">
            <summary>
            创建数据库链接
            </summary>
            <returns>数据库链接</returns>
        </member>
        <member name="M:Arch.Data.DbEngine.Providers.OdbcDatabaseProvider.CreateCommand">
            <summary>
            创建数据库指令
            </summary>
            <returns>数据库指令</returns>
        </member>
        <member name="M:Arch.Data.DbEngine.Providers.OdbcDatabaseProvider.CreateParameterName(System.String)">
            <summary>
            创建数据库参数合法名称
            </summary>
            <param name="name">数据库参数名称</param>
            <returns>据库参数合法名称</returns>
        </member>
        <member name="M:Arch.Data.DbEngine.Providers.OdbcDatabaseProvider.CreateDataAdapter">
            <summary>
            创建数据库适配器
            </summary>
            <returns>数据库适配器</returns>
        </member>
        <member name="M:Arch.Data.DbEngine.Providers.OdbcDatabaseProvider.DeriveParameters(System.Data.Common.DbCommand)">
            <summary>
            导出数据库指令参数
            </summary>
            <param name="command">数据库指令</param>
        </member>
        <member name="P:Arch.Data.DbEngine.Providers.OdbcDatabaseProvider.DeriveParametersSupported">
            <summary>
            是否支持导出数据库指令参数
            </summary>
        </member>
        <member name="T:Arch.Data.DbEngine.Providers.OleDatabaseProvider">
            <summary>
            Sql Server 数据库提供者实现
            </summary>
        </member>
        <member name="M:Arch.Data.DbEngine.Providers.OleDatabaseProvider.CreateConnection">
            <summary>
            创建数据库链接
            </summary>
            <returns>数据库链接</returns>
        </member>
        <member name="M:Arch.Data.DbEngine.Providers.OleDatabaseProvider.CreateCommand">
            <summary>
            创建数据库指令
            </summary>
            <returns>数据库指令</returns>
        </member>
        <member name="M:Arch.Data.DbEngine.Providers.OleDatabaseProvider.CreateParameterName(System.String)">
            <summary>
            创建数据库参数合法名称
            </summary>
            <param name="name">数据库参数名称</param>
            <returns>据库参数合法名称</returns>
        </member>
        <member name="M:Arch.Data.DbEngine.Providers.OleDatabaseProvider.CreateDataAdapter">
            <summary>
            创建数据库适配器
            </summary>
            <returns>数据库适配器</returns>
        </member>
        <member name="M:Arch.Data.DbEngine.Providers.OleDatabaseProvider.DeriveParameters(System.Data.Common.DbCommand)">
            <summary>
            导出数据库指令参数
            </summary>
            <param name="command">数据库指令</param>
        </member>
        <member name="P:Arch.Data.DbEngine.Providers.OleDatabaseProvider.DeriveParametersSupported">
            <summary>
            是否支持导出数据库指令参数
            </summary>
        </member>
        <member name="T:Arch.Data.DbEngine.Providers.SqlDatabaseProvider">
            <summary>
            Sql Server 数据库提供者实现
            </summary>
        </member>
        <member name="M:Arch.Data.DbEngine.Providers.SqlDatabaseProvider.CreateConnection">
            <summary>
            创建数据库链接
            </summary>
            <returns>数据库链接</returns>
        </member>
        <member name="M:Arch.Data.DbEngine.Providers.SqlDatabaseProvider.CreateCommand">
            <summary>
            创建数据库指令
            </summary>
            <returns>数据库指令</returns>
        </member>
        <member name="M:Arch.Data.DbEngine.Providers.SqlDatabaseProvider.CreateParameterName(System.String)">
            <summary>
            创建数据库参数合法名称
            </summary>
            <param name="name">数据库参数名称</param>
            <returns>据库参数合法名称</returns>
        </member>
        <member name="M:Arch.Data.DbEngine.Providers.SqlDatabaseProvider.CreateDataAdapter">
            <summary>
            创建数据库适配器
            </summary>
            <returns>数据库适配器</returns>
        </member>
        <member name="M:Arch.Data.DbEngine.Providers.SqlDatabaseProvider.DeriveParameters(System.Data.Common.DbCommand)">
            <summary>
            导出数据库指令参数
            </summary>
            <param name="command">数据库指令</param>
        </member>
        <member name="P:Arch.Data.DbEngine.Providers.SqlDatabaseProvider.DeriveParametersSupported">
            <summary>
            是否支持导出数据库指令参数
            </summary>
        </member>
        <member name="M:Arch.Data.DbEngine.BackgroundExecutor.EnqueueLogEntry(Arch.Data.Common.Logging.LogEntry)">
            <summary>
            仅发送一次的日志记录
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:Arch.Data.DbEngine.BackgroundExecutor.EnqueueCallback(System.Action)">
            <summary>
            仅执行一次的回调
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:Arch.Data.DbEngine.BackgroundExecutor.StartRwCallback(System.Action,System.Int32)">
            <summary>
            启动读写分离的线程
            </summary>
            <param name="callback"></param>
            <param name="delay"></param>
        </member>
        <member name="F:Arch.Data.DbEngine.RW.FreshnessReadWriteSplit.callbacks">
            <summary>
            确保该callbacks没有删除操作，仅支持读取和增加
            </summary>
        </member>
        <member name="M:Arch.Data.DbEngine.Sharding.DataTableAggregate`1.Sum(System.String,System.String)">
            <summary>
            计算出多个Shard列的和值
            </summary>
            <param name="srcColumnName">源列名</param>
            <param name="aliasColumnName">存入DataTable或者Entity时的字段名，空则与原列名相同</param>
            <returns>当前实例，便于串式编程</returns>
        </member>
        <member name="M:Arch.Data.DbEngine.Sharding.DataTableAggregate`1.Avg(System.String,System.String,System.String)">
            <summary>
            通过Sum和Count间接支持Avg操作
            </summary>
            <param name="sumColumnName">SUM列</param>
            <param name="countColumnName">Count列</param>
            <param name="aliasColumnName">算出Avg之后存在哪一列</param>
            <returns>当前实例，便于串式编程</returns>
        </member>
        <member name="M:Arch.Data.DbEngine.Sharding.DataTableAggregate`1.Count(System.String,System.String)">
            <summary>
            跨Shard计算列的数量
            </summary>
            <param name="srcColumnName">原列名</param>
            <param name="aliasColumnName">存入DataTable或者Entity时的字段名，空则与原列名相同</param>
            <returns>当前实例，便于串式编程</returns>
        </member>
        <member name="M:Arch.Data.DbEngine.Sharding.DataTableAggregate`1.Min(System.String,System.String)">
            <summary>
            跨Shard去除列的最小值
            </summary>
            <param name="srcColumnName">原列名</param>
            <param name="aliasColumnName">存入DataTable或者Entity时的字段名，空则与原列名相同</param>
            <returns>当前实例，便于串式编程</returns>
        </member>
        <member name="M:Arch.Data.DbEngine.Sharding.DataTableAggregate`1.Max(System.String,System.String)">
            <summary>
            跨Shard去除列的最大值
            </summary>
            <param name="srcColumnName">原列名</param>
            <param name="aliasColumnName">存入DataTable或者Entity时的字段名，空则与原列名相同</param>
            <returns>当前实例，便于串式编程</returns>
        </member>
        <member name="M:Arch.Data.DbEngine.Sharding.DataTableAggregate`1.GroupBy(System.String[])">
            <summary>
            类似与Sql中的Groupby
            </summary>
            <param name="groupByColumns">group by的列</param>
            <returns>当前实例，便于串式编程</returns>
        </member>
        <member name="M:Arch.Data.DbEngine.Sharding.DataTableAggregate`1.OrderByDescending(System.String[])">
            <summary>
            降序
            </summary>
            <param name="orderByColumns">order by的列</param>
            <returns>当前实例，便于串式编程</returns>
        </member>
        <member name="M:Arch.Data.DbEngine.Sharding.DataTableAggregate`1.OrderBy(System.String[])">
            <summary>
            升序
            </summary>
            <param name="orderByColumns">order by的列</param>
            <returns>当前实例，便于串式编程</returns>
        </member>
        <member name="M:Arch.Data.DbEngine.Sharding.DataTableAggregate`1.Top(System.Int32)">
            <summary>
            取前多少行，最好配合OrderBy方法使用
            </summary>
            <param name="top">行数</param>
            <returns>结果集</returns>
        </member>
        <member name="M:Arch.Data.DbEngine.Sharding.DataTableAggregate`1.ToList">
            <summary>
            获取结果集
            </summary>
            <returns>结果集</returns>
        </member>
        <member name="M:Arch.Data.DbEngine.Sharding.DataTableAggregate`1.FirstOrDefault">
            <summary>
            第一个或者默认值
            </summary>
            <returns>结果</returns>
        </member>
        <member name="M:Arch.Data.DbEngine.Sharding.DataTableAggregate`1.ToDataTable">
            <summary>
            只返回DataTable
            </summary>
            <returns></returns>
        </member>
        <member name="T:Arch.Data.DbEngine.Sharding.IShardingStrategy">
            <summary>
            新的Sharding策略：
            1. BaseDao中的API均针对单个Shard，接收ShardID参数
            
            两种情形：
            1. 可以根据Shard字段计算出位于哪些Shard
            2. 无法知晓哪些Shard：落向所有Shard（性能？）
            
            每个DatabaseSet一个Strategy
            </summary>
        </member>
        <member name="M:Arch.Data.DbEngine.Sharding.IShardingStrategy.SetShardConfig(System.Collections.Generic.IDictionary{System.String,System.String},Arch.Data.DbEngine.Configuration.DatabaseSetElement)">
            <summary>
            初始化Sharding策略
            </summary>
            <param name="config"></param>
            <param name="databaseSet"></param>
        </member>
        <member name="M:Arch.Data.DbEngine.Sharding.IShardingStrategy.ShuffleData``2(System.Collections.Generic.IList{``0},System.Func{``0,``1})">
            <summary>
            将数据按照当前的策略进行分组，返回ShardID：T的键值对，主要用于增删改
            </summary>
            <typeparam name="T">需要Shuffle的类型</typeparam>
            <typeparam name="TColumnType">Sharding的字段</typeparam>
            <param name="dataList">需要Shuffle的数据</param>
            <param name="shuffleByColumn"></param>
            <returns>ShardID：T的键值对</returns>
        </member>
        <member name="M:Arch.Data.DbEngine.Sharding.IShardingStrategy.ComputeShardIdsBetween``1(``0,``0)">
            <summary>
            如果Sql语句中有Between，计算出当前Sql语句需要在哪几个Shard上进行操作
            </summary>
            <typeparam name="TColumnType"></typeparam>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.DbEngine.Sharding.IShardingStrategy.ComputeShardIdsIn``1(System.Collections.Generic.IList{``0})">
            <summary>
            如果Sql语句中有In，计算出当前Sql语句需要在哪几个Shard上进行操作
            </summary>
            <typeparam name="TColumnType"></typeparam>
            <param name="columnValues"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.DbEngine.Sharding.IShardingStrategy.ComputeShardIdsIn``1(``0[])">
            <summary>
            如果Sql语句中有In，计算出当前Sql语句需要在哪几个Shard上进行操作
            </summary>
            <typeparam name="TColumnType"></typeparam>
            <param name="columnValues"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.DbEngine.Sharding.IShardingStrategy.ComputeShardId``1(``0)">
            <summary>
            根据当前策略，计算出当前字段属于哪个Shard
            </summary>
            <typeparam name="TColumnType"></typeparam>
            <param name="columnValue"></param>
            <returns></returns>
        </member>
        <member name="P:Arch.Data.DbEngine.Sharding.IShardingStrategy.AllShards">
            <summary>
            所有Shard列表
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.Sharding.IShardingStrategy.ShardColumns">
            <summary>
            Shard字段列表，通常一个库中有多个表，可能一个表采用orderid做Shard，另一个表采用cityid做Shard，这里提供这种支持
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.Sharding.IShardingStrategy.ShardByDB">
            <summary>
            分库，如果配置了Sharding，默认为True，可以显示通过shardByDB=false设置为False
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.Sharding.IShardingStrategy.ShardByTable">
            <summary>
            分表，默认为False,可以显示通过shardByTable=true设置为True
            </summary>
        </member>
        <member name="M:Arch.Data.DbEngine.Sharding.ModShardingStrategy.ShuffleData``2(System.Collections.Generic.IList{``0},System.Func{``0,``1})">
            <summary>
            将数据按照当前的策略进行分组，返回ShardID：T的键值对，主要用于增删改
            </summary>
            <typeparam name="T">需要Shuffle的类型</typeparam>
            <typeparam name="TColumnType">Sharding的字段</typeparam>
            <param name="dataList">需要Shuffle的数据</param>
            <param name="shuffleByColumn"></param>
            <returns>ShardID：T的键值对</returns>
        </member>
        <member name="M:Arch.Data.DbEngine.Sharding.ModShardingStrategy.ComputeShardId``1(``0)">
            <summary>
            通过取模, 获取字段的值应该位于哪个Shard
            </summary>
            <typeparam name="TColumnType"></typeparam>
            <param name="columnValue"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.DbEngine.Sharding.SequenceShardingStrategy.ShuffleData``2(System.Collections.Generic.IList{``0},System.Func{``0,``1})">
            <summary>
            将数据按照当前的策略进行分组，返回ShardID：T的键值对，主要用于增删改
            </summary>
            <typeparam name="T">需要Shuffle的类型</typeparam>
            <typeparam name="TColumnType">Sharding的字段</typeparam>
            <param name="dataList">需要Shuffle的数据</param>
            <param name="shuffleByColumn"></param>
            <returns>ShardID：T的键值对</returns>
        </member>
        <member name="M:Arch.Data.DbEngine.Sharding.SequenceShardingStrategy.ComputeShardId``1(``0)">
            <summary>
            测试时需要注意computeByColumn的Delegate返回Null的情况
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="computeByColumn"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.DbEngine.Sharding.ShardingExecutor.ExecuteShardTable(System.Collections.Generic.IList{Arch.Data.DbEngine.Statement})">
            <summary>
            表结构均相同, 只有一个数据库，将一个表分为多个名称不同的表
            </summary>
            <param name="statements"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.DbEngine.Sharding.ShardingStrategyFactory.GetShardingStrategy(Arch.Data.DbEngine.Configuration.DatabaseSetElement)">
            <summary>
            get shard strategy object via shard config
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="T:Arch.Data.DbEngine.Sharding.ShardingType">
            <summary>
            Shard操作的类型，详细见枚举描述
            </summary>
        </member>
        <member name="F:Arch.Data.DbEngine.Sharding.ShardingType.ShardByDB">
            <summary>
            默认，多个相同名称的表，分散在多个数据库中
            </summary>
        </member>
        <member name="F:Arch.Data.DbEngine.Sharding.ShardingType.ShardByTable">
            <summary>
            所有表位于同一数据库中，每个表名均不相同
            </summary>
        </member>
        <member name="F:Arch.Data.DbEngine.Sharding.ShardingType.ShardByDBAndTable">
            <summary>
            所有表分散在多个数据库中，每个表名均不相同
            </summary>
        </member>
        <member name="T:Arch.Data.DbEngine.StatementParameterCollection">
            <summary>
            指令参数
            </summary>
        </member>
        <member name="M:Arch.Data.DbEngine.StatementParameterCollection.AddInParameter(System.String,System.Data.DbType)">
            <summary>
            添加Input类型的参数
            </summary>
            <param name="name">参数名，建议有@符号，如果没有，框架会补偿</param>
            <param name="dbType">DbType</param>
            <param name="value">参数值</param>
        </member>
        <member name="M:Arch.Data.DbEngine.StatementParameterCollection.AddInParameter(System.String,System.Data.DbType,System.Object)">
            <summary>
            添加Input类型的参数
            </summary>
            <param name="name">参数名，建议有@符号，如果没有，框架会补偿</param>
            <param name="dbType">DbType</param>
            <param name="value">参数值</param>
        </member>
        <member name="M:Arch.Data.DbEngine.StatementParameterCollection.AddInParameter(System.String,System.Data.DbType,System.Object,System.Boolean)">
            <summary>
            添加Input类型的参数
            </summary>
            <param name="name">参数名，建议有@符号，如果没有，框架会补偿</param>
            <param name="dbType">DbType</param>
            <param name="value">参数值</param>
            <param name="sensitive">参数是否敏感，如果敏感，不记入Log系统</param>
        </member>
        <member name="M:Arch.Data.DbEngine.StatementParameterCollection.AddInParameter(System.String,System.Data.DbType,System.Object,System.Boolean,System.Boolean)">
            <summary>
            添加Input类型的参数
            </summary>
            <param name="name">参数名，建议有@符号，如果没有，框架会补偿</param>
            <param name="dbType">DbType</param>
            <param name="value">参数值</param>
            <param name="sensitive">参数是否敏感，如果敏感，不记入Log系统</param>
            <param name="isSharding">是否是Sharding字段</param>
        </member>
        <member name="T:Arch.Data.DbEngine.Database">
            <summary>
            物理数据库对象
            </summary>
        </member>
        <member name="F:Arch.Data.DbEngine.Database.m_ConnectionString">
            <summary>
            数据库链接
            </summary>
        </member>
        <member name="F:Arch.Data.DbEngine.Database.m_DatabaseProvider">
            <summary>
            数据库提供者对象
            </summary>
        </member>
        <member name="F:Arch.Data.DbEngine.Database.RealDatabaseName">
            <summary>
            真正的数据库名
            </summary>
        </member>
        <member name="M:Arch.Data.DbEngine.Database.#ctor(System.String,System.String,System.String,Arch.Data.DbEngine.IDatabaseProvider)">
            <summary>
            构造方法
            </summary>
            <param name="databaseSet"></param>
            <param name="databaseName"></param>
            <param name="connectionStringName">数据库链接名称</param>
            <param name="databaseProvider">数据库提供者</param>
        </member>
        <member name="M:Arch.Data.DbEngine.Database.LoadRealConnectionString">
            <summary>
            重新读取All In One中的连接串
            </summary>
        </member>
        <member name="M:Arch.Data.DbEngine.Database.GetOpenConnection(System.Boolean)">
            <summary>
            获取打开的数据库链接
            </summary>
            <param name="disposeInnerConnection">是否释放数据库链接对象</param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.DbEngine.Database.CreateConnection">
            <summary>
            创建数据库链接
            </summary>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.DbEngine.Database.PrepareCommand(Arch.Data.DbEngine.Statement)">
            <summary>
            准备数据库指令
            </summary>
            <param name="statement">上层指令</param>
            <returns>数据库指令</returns>
        </member>
        <member name="M:Arch.Data.DbEngine.Database.UpdateStatementParamenters(Arch.Data.DbEngine.Statement,System.Data.Common.DbCommand)">
            <summary>
            更新执行后的参数
            </summary>
            <param name="statement">指令</param>
            <param name="command">数据库指令</param>
        </member>
        <member name="M:Arch.Data.DbEngine.Database.LoadDataSet(System.Data.Common.DbCommand,System.Data.DataSet,System.String[])">
            <summary>
            加载程序集
            </summary>
            <param name="command">指令</param>
            <param name="dataSet">程序集</param>
            <param name="tableNames">表名称</param>
        </member>
        <member name="M:Arch.Data.DbEngine.Database.ExecuteDataSet(Arch.Data.DbEngine.Statement,System.String[])">
            <summary>
            执行返回数据集指令
            </summary>
            <param name="statement">指令</param>
            <param name="tableNames">填充表名称</param>
            <returns>数据集</returns>
        </member>
        <member name="M:Arch.Data.DbEngine.Database.ExecuteNonQuery(Arch.Data.DbEngine.Statement)">
            <summary>
            执行非查询指令
            </summary>
            <param name="statement">指令</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:Arch.Data.DbEngine.Database.ExecuteReader(Arch.Data.DbEngine.Statement)">
            <summary>
            执行返回单向只读数据集的指令
            </summary>
            <param name="statement">指令</param>
            <returns>单向只读DataReader对象</returns>
        </member>
        <member name="M:Arch.Data.DbEngine.Database.ExecuteScalar(Arch.Data.DbEngine.Statement)">
            <summary>
            执行单返回值聚集查询指令
            </summary>
            <param name="statement">指令</param>
            <returns>聚集结果</returns>
        </member>
        <member name="M:Arch.Data.DbEngine.Database.InnnerExecuteReader(Arch.Data.DbEngine.Statement)">
            <summary>
            执行返回单向只读数据集的指令
            </summary>
            <param name="statement">指令</param>
            <returns>单向只读DataReader对象</returns>
        </member>
        <member name="M:Arch.Data.DbEngine.Database.InnnerExecuteScalar(Arch.Data.DbEngine.Statement)">
            <summary>
            执行单返回值聚集查询指令
            </summary>
            <param name="statement">指令</param>
            <returns>聚集结果</returns>
        </member>
        <member name="P:Arch.Data.DbEngine.Database.ConnectionString">
            <summary>
            数据库链接
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.Database.AllInOneDatabaseName">
            <summary>
            对应的AllInOne中的Key
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.Database.DalConfigDatabaseName">
            <summary>
            DalConfig中配置的DatabaseName
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.Database.DatabaseRWType">
            <summary>
            数据库的类型，读库/写库
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.Database.Available">
            <summary>
            当前数据库是否处于可用状态
            </summary>
        </member>
        <member name="T:Arch.Data.DbEngine.DatabaseFactory">
            <summary>
            数据库管理器，也是DAL的初始化管理器
            </summary>
        </member>
        <member name="F:Arch.Data.DbEngine.DatabaseFactory.Random">
            <summary>
            随机发生器,用来动态选择slave数据库
            </summary>
        </member>
        <member name="M:Arch.Data.DbEngine.DatabaseFactory.GetDatabasesByStatement(Arch.Data.DbEngine.Statement)">
            <summary>
            自动读写分离时，获取本次操作涉及到的Database
            </summary>
            <param name="statement"></param>
            <returns></returns>
        </member>
        <member name="T:Arch.Data.DbEngine.DatabaseType">
            <summary>
            物理数据库类型
            </summary>
        </member>
        <member name="F:Arch.Data.DbEngine.DatabaseType.Master">
            <summary>
            主数据库，可读可写
            </summary>
        </member>
        <member name="F:Arch.Data.DbEngine.DatabaseType.Slave">
            <summary>
            从数据库，可读
            </summary>
        </member>
        <member name="T:Arch.Data.DbEngine.OperationType">
            <summary>
            读写分离时用来区分操作类型
            </summary>
        </member>
        <member name="F:Arch.Data.DbEngine.OperationType.Default">
            <summary>
            未指定，默认为主数据库，即可读可写
            </summary>
        </member>
        <member name="F:Arch.Data.DbEngine.OperationType.Read">
            <summary>
            读操作，在DBSet中定义了相应的slave库时，则在slave库执行，否则在master库执行
            </summary>
        </member>
        <member name="F:Arch.Data.DbEngine.OperationType.Write">
            <summary>
            写操作，从master库执行
            </summary>
        </member>
        <member name="T:Arch.Data.DbEngine.Statement">
            <summary>
            指令
            </summary>
        </member>
        <member name="F:Arch.Data.DbEngine.Statement.m_Parameters">
            <summary>
            参数集合
            </summary>
        </member>
        <member name="M:Arch.Data.DbEngine.Statement.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:Arch.Data.DbEngine.Statement.Validate">
            <summary>
            验证指令
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.Statement.StatementText">
            <summary>
            指令内容
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.Statement.SQLHash">
            <summary>
            指令内容的Hash值（MD5 - base64)
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.Statement.SQLCacheKey">
            <summary>
            指令内容的缓存key
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.Statement.Duration">
            <summary>
            持续时间
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.Statement.ExecStatus">
            <summary>
            执行是否成功
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.Statement.Invoker">
            <summary>
            调用者信息 - 类名
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.Statement.InvokeMethod">
            <summary>
            调用者信息 - 方法签名
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.Statement.StatementType">
            <summary>
            指令类型
            Sql-Sql语句
            StoreProcedure-存贮过程
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.Statement.DatabaseSet">
            <summary>
            逻辑数据库
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.Statement.AllInOneKey">
            <summary>
            All in one的Key名称
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.Statement.ShardID">
            <summary>
            分区标识
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.Statement.OperationType">
            <summary>
            指令操作类型
            Default-未指定,默认在master库执行
            Read-读操作,在slave库执行
            Write-写操作,在master库执行
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.Statement.Timeout">
            <summary>
            指令超时时长
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.Statement.IsSensitive">
            <summary>
            是否包含敏感信息
            如果包含敏感信息则忽略日志
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.Statement.Hints">
            <summary>
            扩展属性
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.Statement.Parameters">
            <summary>
            指令参数集
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.Statement.RecordCount">
            <summary>
            该Statement影响的行数
            </summary>
        </member>
        <member name="T:Arch.Data.DbEngine.StatementParameter">
            <summary>
            指令参数
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.StatementParameter.DbType">
            <summary>
            数据类型
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.StatementParameter.ExtendTypeValue">
            <summary>
            扩展数据类型,例如sqldbtype
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.StatementParameter.ExtendType">
            <summary>
            1: sqltype
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.StatementParameter.Direction">
            <summary>
            参数方向
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.StatementParameter.IsNullable">
            <summary>
            是否可空
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.StatementParameter.Name">
            <summary>
            参数名称
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.StatementParameter.TypeName">
            <summary>
             TVP专用，TVP的类型名称，可以与Name一致
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.StatementParameter.Size">
            <summary>
            大小
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.StatementParameter.Value">
            <summary>
            参数值
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.StatementParameter.IsSensitive">
            <summary>
            参数是否为敏感数据
            </summary>
        </member>
        <member name="P:Arch.Data.DbEngine.StatementParameter.IsShardingColumn">
            <summary>
            是否是Sharding字段
            </summary>
        </member>
        <member name="T:Arch.Data.DbEngine.StatementType">
            <summary>
            Sql指令类型
            </summary>
        </member>
        <member name="F:Arch.Data.DbEngine.StatementType.Sql">
            <summary>
            Sql语句
            </summary>
        </member>
        <member name="F:Arch.Data.DbEngine.StatementType.StoredProcedure">
            <summary>
            存贮过程
            </summary>
        </member>
        <member name="T:Arch.Data.DbEngine.TransactionConnectionManager">
            <summary>
            对于相同的数据库,在同一个事务中,只打开一个数据库链接
            </summary>
        </member>
        <member name="M:Arch.Data.DbEngine.TransactionConnectionManager.GetConnection(Arch.Data.DbEngine.Database)">
            <summary>
            获取数据库链接
            当在同一个事务中的时候获取到的相同数据库的链接应该是一个对象
            避免分布式事务,仅支持TransactionScope
            </summary>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.DbEngine.TransactionConnectionManager.OnTransactionCompleted(System.Object,System.Transactions.TransactionEventArgs)">
            <summary>
            事务完成事件
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Arch.Data.Exceptions.ExceptionUtil.GetDbExceptionErrorCode(System.Data.Common.DbException)">
            <summary>
            根据DbException，获取相应的错误码
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Exceptions.ExceptionUtil.IsTimeoutException(System.Exception)">
            <summary>
            判断一个异常的堆栈中是否有超时异常
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="T:Arch.Data.IBaseDao">
            <summary>
            dal fx入口
            </summary>
        </member>
        <member name="M:Arch.Data.IBaseDao.GetQuery">
            <summary>
            获得查询对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.IBaseDao.GetQuery``1">
            <summary>
            获得查询对象
            </summary>
            <typeparam name="T">查询实体类</typeparam>
            <returns>查询对象</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.Insert``1(``0)">
            <summary>
            插入对象
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="obj">实体对象</param>
            <returns>返回第一列值（譬如自增长ID）</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.Insert``1(``0,System.Collections.IDictionary)">
            <summary>
            插入对象
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="obj">实体对象</param>
            <param name="extendParams">指令扩展属性（分片：shardcol,超时:timeout）</param>
            <returns>返回第一列值（譬如自增长ID）</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.Insert``1(System.String,``0,System.Collections.IDictionary)">
            <summary>
            插入对象
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="logicDbName">逻辑数据库名</param>
            <param name="obj">实体对象</param>
            <param name="extendParams">指令扩展属性（分片：shardcol,超时:timeout） </param>
            <returns>返回第一列值（譬如自增长ID）</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.BulkInsert``1(System.Collections.Generic.IList{``0})">
            <summary>
            批量插入对象,batchSize最大10000，建议100
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="list">对象集合</param>
            <returns>是否成功</returns>
            <exception cref="T:Arch.Data.DalException">数据访问异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.BulkInsert``1(System.Collections.Generic.IList{``0},System.Collections.IDictionary)">
            <summary>
            批量插入对象,batchSize：100
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="list">对象集合</param>
            <param name="extendParams">扩展属性，譬如:timeout等</param>
            <returns>是否成功</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.BulkInsert``1(System.String,System.Collections.Generic.IList{``0},System.Collections.IDictionary)">
            <summary>
            批量插入对象,batchSize：100
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="logicDbName">逻辑数据库名</param>
            <param name="list">对象集合</param>
            <param name="extendParams">扩展属性，譬如:timeout等 </param>
            <returns>是否成功</returns>
            <remarks>1.集合对象不能超过10000, 2.SQLServer参数不能超过2100, Mysql控制报文最大长度</remarks>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.Update``1(``0)">
            <summary>
            更新记录
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="obj">实体对象</param>
            <returns>影响行数</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.Update``1(``0,System.Collections.IDictionary)">
            <summary>
            更新记录
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="obj">实体对象</param>
            <param name="extendParams">指令扩展属性（分片：shardcol,超时:timeout）</param>
            <returns>影响行数</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.Update``1(System.String,``0,System.Collections.IDictionary)">
            <summary>
            更新记录
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="logicDbName">逻辑数据库名</param>
            <param name="obj">对象</param>
            <param name="extendParams">指令扩展属性（分片：shardcol,超时:timeout）</param>
            <returns>影响行数</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.Delete``1(``0)">
            <summary>
            删除记录
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="obj">对象</param>
            <returns>影响行数</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.Delete``1(``0,System.Collections.IDictionary)">
            <summary>
            删除记录
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="obj">对象</param>
            <param name="extendParams">指令扩展属性（分片：shardcol,超时:timeout</param>
            <returns>影响行数</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.Delete``1(System.String,``0,System.Collections.IDictionary)">
            <summary>
            删除记录
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="logicDbName">逻辑数据库名</param>
            <param name="obj">对象</param>
            <param name="extendParams">指令扩展属性（分片：shardcol,超时:timeout）</param>
            <returns>影响行数</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.GetByKey``1(System.Object)">
            <summary>
            根据主键获得一个对象,输入值类型一定要和实体类生成的主键类型一致，不支持联合组键
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">单一主键</param>
            <returns>对象</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.GetByKey``1(System.Object,System.Collections.IDictionary)">
            <summary>
             根据主键获得一个对象,输入值类型一定要和实体类生成的主键类型一致，不支持联合组键
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">单一主键</param>
            <param name="extendParams">指令参数：如timeout</param>
            <returns>对象</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.GetByKey``1(System.Object,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType)">
            <summary>
             根据主键获得一个对象,输入值类型一定要和实体类生成的主键类型一致，不支持联合组键
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">单一主键</param>
            <param name="extendParams">指令参数：如timeout</param>
            <param name="operationType">操作类型，读写分离，默认从master库读取</param>
            <returns>对象</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.GetByKey``1(System.String,System.Object,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType)">
            <summary>
             根据主键获得一个对象,输入值类型一定要和实体类生成的主键类型一致，不支持联合组键
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="logicDbName">逻辑数据库名</param>
            <param name="key">单一主键</param>
            <param name="extendParams">指令参数：如timeout</param>
            <param name="operationType">操作类型，读写分离，默认从master库读取</param>
            <returns>对象</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.GetAll``1">
            <summary>
            获取所有记录
            </summary>
            <typeparam name="T">实体类</typeparam>
            <returns>所有对象</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.GetAll``1(Arch.Data.DbEngine.OperationType)">
            <summary>
            获取所有记录
            </summary>
            <typeparam name="T">实体类</typeparam>
            <param name="operationType">操作类型，读写分离，默认从master库读取</param>
            <returns>所有对象</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.GetAll``1(System.Collections.IDictionary,Arch.Data.DbEngine.OperationType)">
            <summary>
            获取所有记录
            </summary>
            <typeparam name="T">实体类</typeparam>
            <param name="extendParams">指令参数：如timeout</param>
            <param name="operationType">操作类型，读写分离，默认从master库读取</param>
            <returns>所有对象</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.GetAll``1(System.String,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType)">
            <summary>
            获取所有记录
            </summary>
            <typeparam name="T">实体类</typeparam>
            <param name="logicDbName">逻辑数据库名</param>
            <param name="extendParams">指令参数：如timeout</param>
            <param name="operationType">操作类型，读写分离，默认从master库读取</param>
            <returns>所有对象</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.SelectList``1(System.String)">
            <summary>
            执行查询语句
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="sql">sql语句</param>
            <returns>结果集合</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.SelectList``1(System.String,Arch.Data.DbEngine.StatementParameterCollection)">
            <summary>
            执行查询语句
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameters">查询参数</param>
            <returns>结果集合</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.SelectList``1(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary)">
            <summary>
            执行查询语句
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameters">查询参数</param>
            <param name="extendParams">指令参数：如timeout</param>
            <returns>结果集合</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.SelectList``1(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType)">
            <summary>
            执行查询语句
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameters">查询参数</param>
            <param name="extendParams">指令参数：如timeout</param>
            <param name="operationType">操作类型，读写分离，默认从master库读取</param>
            <returns>结果集合</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.SelectList``1(System.String,System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType)">
            <summary>
            执行查询语句
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="logicDbName">逻辑数据库名</param>
            <param name="sql">sql语句</param>
            <param name="parameters">查询参数</param>
            <param name="extendParams">指令参数：如timeout</param>
            <param name="operationType">操作类型，读写分离，默认从master库读取</param>
            <returns>结果集合</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.SelectFirst``1(System.String)">
            <summary>
            获取第一行对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="sql">sql语句</param>
            <returns>对象</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.SelectFirst``1(System.String,Arch.Data.DbEngine.StatementParameterCollection)">
            <summary>
            获取第一行对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameters">查询参数</param>
            <returns>对象</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.SelectFirst``1(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary)">
            <summary>
            获取第一行对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameters">查询参数</param>
            <param name="extendParams">指令参数：如timeout</param>
            <returns>对象</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.SelectFirst``1(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType)">
            <summary>
            获取第一行对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameters">查询参数</param>
            <param name="extendParams">指令参数：如timeout</param>
            <param name="operationType">操作类型，读写分离，默认从master库读取</param>
            <returns>对象</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.SelectFirst``1(System.String,System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType)">
            <summary>
            获取第一行对象
            </summary>
            <typeparam name="T">对象</typeparam>
            <param name="logicDbName">逻辑数据库名</param>
            <param name="sql">sql语句</param>
            <param name="parameters">查询参数</param>
            <param name="extendParams">指令参数：如timeout</param>
            <param name="operationType">操作类型，读写分离，默认从master库读取</param>
            <returns>对象</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.SelectFirst``1(Arch.Data.Orm.IQuery)">
            <summary>
            获取第一行对象
            </summary>
            <typeparam name="T">对象</typeparam>
            <param name="query">查询对象</param>
            <returns>对象</returns>
        </member>
        <member name="M:Arch.Data.IBaseDao.SelectFirst``1(Arch.Data.Orm.IQuery,System.Collections.IDictionary)">
            <summary>
            获取第一行对象
            </summary>
            <typeparam name="T">对象</typeparam>
            <param name="query">查询对象</param>
            <param name="extendParams">指令参数：如timeout</param>
            <returns>对象</returns>
        </member>
        <member name="M:Arch.Data.IBaseDao.SelectFirst``1(Arch.Data.Orm.IQuery,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType)">
            <summary>
            获取第一行对象
            </summary>
            <typeparam name="T">对象</typeparam>
            <param name="query">查询对象</param>
            <param name="extendParams">指令参数：如timeout</param>
            <param name="operationType">操作类型，读写分离，默认从master库读取</param>
            <returns>对象</returns>
        </member>
        <member name="M:Arch.Data.IBaseDao.SelectFirst``1(System.String,Arch.Data.Orm.IQuery,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType)">
            <summary>
            获取第一行对象
            </summary>
            <typeparam name="T">对象</typeparam>
            <param name="logicDbName">逻辑数据库名</param>
            <param name="query">查询对象</param>
            <param name="extendParams">指令参数：如timeout</param>
            <param name="operationType">操作类型，读写分离，默认从master库读取</param>
            <returns>对象</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.SelectList``1(Arch.Data.Orm.IQuery)">
            <summary>
            执行查询语句
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="query">查询对象</param>
            <returns>对象集合</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.SelectList``1(Arch.Data.Orm.IQuery,System.Collections.IDictionary)">
            <summary>
            执行查询语句
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="query">查询对象</param>
            <param name="extendParams">指令参数：如timeout</param>
            <returns>对象集合</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.SelectList``1(Arch.Data.Orm.IQuery,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType)">
            <summary>
            执行查询语句
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="query">查询对象</param>
            <param name="extendParams">指令参数：如timeout</param>
            <param name="operationType">操作类型，读写分离，默认从master库读取</param>
            <returns>对象集合</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.SelectList``1(System.String,Arch.Data.Orm.IQuery,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType)">
            <summary>
            执行查询语句
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="logicDbName">逻辑数据库名</param>
            <param name="query">查询对象</param>
            <param name="extendParams">指令参数：如timeout</param>
            <param name="operationType">操作类型，读写分离，默认从master库读取</param>
            <returns>对象集合</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.SelectDataReader(System.String)">
            <summary>
            执行查询语句
            </summary>
            <param name="sql">SQL语句</param>
            <returns>IDataReader</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.SelectDataReader(System.String,Arch.Data.DbEngine.StatementParameterCollection)">
            <summary>
            执行查询语句
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameters">查询参数</param>
            <returns>IDataReader</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.SelectDataReader(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary)">
            <summary>
            执行查询语句
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameters">查询参数</param>
            <param name="extendParams">指令扩展属性</param>
            <returns>IDataReader</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.SelectDataReader(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType)">
            <summary>
            执行查询语句
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameters">查询参数</param>
            <param name="extendParams">指令扩展属性</param>
            <param name="operationType">操作类型，读写分离，默认从master库读取</param>
            <returns>IDataReader</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.SelectDataReader(System.String,System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType)">
            <summary>
            执行查询语句
            </summary>
            <param name="logicDbName">逻辑数据库名</param>
            <param name="sql">sql语句</param>
            <param name="parameters">查询参数</param>
            <param name="extendParams">指令扩展属性</param>
            <param name="operationType">操作类型，读写分离，默认从master库读取</param>
            <returns>IDataReader</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.VisitDataReader``1(System.String,System.Func{System.Data.IDataReader,``0})">
            <summary>
            执行查询语句，并返回指定的结果（连接会确认被释放，安全）
            </summary>
            <typeparam name="T">返回值的类型</typeparam>
            <param name="sql">SQL语句</param>
            <param name="callback">回调，接受IDataReader作为参数，返回T类型的结果</param>
            <returns>T</returns>
        </member>
        <member name="M:Arch.Data.IBaseDao.VisitDataReader``1(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Func{System.Data.IDataReader,``0})">
            <summary>
            执行查询语句，并返回指定的结果（连接会确认被释放，安全）
            </summary>
            <typeparam name="T">返回值的类型</typeparam>
            <param name="sql">SQL语句</param>
            <param name="parameters">查询参数</param>
            <param name="callback">回调，接受IDataReader作为参数，返回T类型的结果</param>
            <returns>T</returns>
        </member>
        <member name="M:Arch.Data.IBaseDao.VisitDataReader``1(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary,System.Func{System.Data.IDataReader,``0})">
            <summary>
            执行查询语句，并返回指定的结果（连接会确认被释放，安全）
            </summary>
            <typeparam name="T">返回值的类型</typeparam>
            <param name="sql">SQL语句</param>
            <param name="parameters">查询参数</param>
            <param name="extendParams">指令扩展属性</param>
            <param name="callback">回调，接受IDataReader作为参数，返回T类型的结果</param>
            <returns>T</returns>
        </member>
        <member name="M:Arch.Data.IBaseDao.VisitDataReader``1(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType,System.Func{System.Data.IDataReader,``0})">
            <summary>
            执行查询语句，并返回指定的结果（连接会确认被释放，安全）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">sql语句</param>
            <param name="parameters">查询参数</param>
            <param name="extendParams">指令扩展属性</param>
            <param name="operationType">操作类型，读写分离，默认从slave库读取</param>
            <param name="callback">回调，接受IDataReader作为参数，返回T类型的结果</param>
            <returns>T</returns>
        </member>
        <member name="M:Arch.Data.IBaseDao.VisitDataReader``1(System.String,System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType,System.Func{System.Data.IDataReader,``0})">
            <summary>
            执行查询语句，并返回指定的结果（连接会确认被释放，安全）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="logicDbName">逻辑数据库名</param>
            <param name="sql">sql语句</param>
            <param name="parameters">查询参数</param>
            <param name="extendParams">指令扩展属性</param>
            <param name="operationType">操作类型，读写分离，默认从slave库读取</param>
            <param name="callback">回调，接受IDataReader作为参数，返回T类型的结果</param>
            <returns>T</returns>
        </member>
        <member name="M:Arch.Data.IBaseDao.SelectDataTable(System.String)">
            <summary>
            执行查询语句
            </summary>
            <param name="sql">sql语句</param>
            <returns>DataTable</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.SelectDataTable(System.String,Arch.Data.DbEngine.StatementParameterCollection)">
            <summary>
            执行查询语句
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameters">查询参数</param>
            <returns>DataTable</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.SelectDataTable(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary)">
            <summary>
             执行查询语句
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameters">查询参数</param>
            <param name="extendParams">指令的扩展属性</param>
            <returns>DataTable</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.SelectDataTable(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType)">
            <summary>
            执行查询语句
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameters">查询参数</param>
            <param name="extendParams">指令的扩展属性 </param>
            <param name="operationType">操作类型，读写分离，默认从master库读取</param>
            <returns>DataTable</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.SelectDataTable(System.String,System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType)">
            <summary>
            执行查询语句
            </summary>
            <param name="logicDbName">逻辑数据库名</param>
            <param name="sql">sql语句</param>
            <param name="parameters">查询参数</param>
            <param name="extendParams">指令的扩展属性 </param>
            <param name="operationType">操作类型，读写分离，默认从master库读取</param>
            <returns>DataTable</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.SelectDataSet(System.String)">
            <summary>
            通过dataset查询
            </summary>
            <param name="sql">sql语句</param>
            <returns>DataSet</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.SelectDataSet(System.String,Arch.Data.DbEngine.StatementParameterCollection)">
            <summary>
            通过dataset查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameters">查询参数</param>
            <returns>DataSet</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.SelectDataSet(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary)">
            <summary>
            通过dataset查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameters">查询参数</param>
            <param name="extendParams">指令的扩展属性</param>
            <returns>DataSet</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.SelectDataSet(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType)">
            <summary>
            通过dataset查询
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameters">查询参数</param>
            <param name="extendParams">指令的扩展属性 </param>
            <param name="operationType">操作类型，读写分离，默认从master库读取</param>
            <returns>DataSet</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.SelectDataSet(System.String,System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType)">
            <summary>
            通过dataset查询
            </summary>
            <param name="logicDbName">逻辑数据库名</param>
            <param name="sql">SQL语句</param>
            <param name="parameters">查询参数</param>
            <param name="extendParams">指令的扩展属性</param>
            <param name="operationType">操作类型，读写分离，默认从master库读取</param>
            <returns>DataSet</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.SelectDataSet``1(Arch.Data.Orm.IQuery)">
            <summary>
            通过dataset查询，以查询对象作为输入，DataSet作为输出。
            当需要用手动映射替换ORM（性能提升）时可以使用。
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="query">查询对象</param>
            <returns>DataSet</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.SelectDataSet``1(Arch.Data.Orm.IQuery,System.Collections.IDictionary)">
            <summary>
            通过dataset查询，以查询对象作为输入，DataSet作为输出。
            当需要用手动映射替换ORM（性能提升）时可以使用。
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="query">查询对象</param>
            <param name="extendParams">指令参数：如timeout</param>
            <returns>DataSet</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.SelectDataSet``1(Arch.Data.Orm.IQuery,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType)">
            <summary>
            通过dataset查询，以查询对象作为输入，DataSet作为输出。
            当需要用手动映射替换ORM（性能提升）时可以使用。
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="query">查询对象</param>
            <param name="extendParams">指令参数：如timeout</param>
            <param name="operationType">操作类型，读写分离，默认从master库读取</param>
            <returns>DataSet</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.SelectDataSet``1(System.String,Arch.Data.Orm.IQuery,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType)">
            <summary>
            通过dataset查询，以查询对象作为输入，DataSet作为输出。
            当需要用手动映射替换ORM（性能提升）时可以使用。
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="logicDbName">逻辑数据库名</param>
            <param name="query">查询对象</param>
            <param name="extendParams">指令参数：如timeout </param>
            <param name="operationType">操作类型，读写分离，默认从master库读取</param>
            <returns>DataSet</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.ExecScalarBySp(System.String,Arch.Data.DbEngine.StatementParameterCollection)">
            <summary>
            执行单返回值聚集查询指令
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">查询参数</param>
            <returns>object, 返回存储过程执行结果的第一行第一列，如果存储过程执行结果为0行，则返回null。</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.ExecScalarBySp(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary)">
            <summary>
            执行单返回值聚集查询指令
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">查询参数</param>
            <param name="extendParams">指令参数：如timeout</param>
            <returns>object, 返回存储过程执行结果的第一行第一列，如果存储过程执行结果为0行，则返回null。</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.ExecScalarBySp(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType)">
            <summary>
            执行单返回值聚集查询指令
            </summary>
            <param name="procName">存储过程名</param>
            <param name="parameters">查询参数</param>
            <param name="extendParams">指令参数：如timeout</param>
            <param name="operationType">操作类型，读写分离，默认从master库读取</param>
            <returns>object, 返回存储过程执行结果的第一行第一列，如果存储过程执行结果为0行，则返回null。</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.ExecScalarBySp(System.String,System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType)">
            <summary>
            执行单返回值聚集查询指令
            </summary>
            <param name="logicDbName">逻辑数据库名</param>
            <param name="procName">存储过程名</param>
            <param name="parameters">查询参数</param>
            <param name="extendParams">指令参数：如timeout</param>
            <param name="operationType">操作类型，读写分离，默认从master库读取</param>
            <returns>object, 返回存储过程执行结果的第一行第一列，如果存储过程执行结果为0行，则返回null。</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.ExecSp(System.String,Arch.Data.DbEngine.StatementParameterCollection)">
            <summary>
            执行存储过程
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameters">查询参数</param>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.ExecSp(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary)">
            <summary>
            执行存储过程
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameters">查询参数</param>
            <param name="extendParams">指令参数：如timeout</param>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.ExecSp(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType)">
            <summary>
            执行存储过程
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameters">查询参数</param>
            <param name="extendParams">指令参数：如timeout</param>
            <param name="operationType">操作类型，读写分离，默认从master库读取</param>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.ExecSp(System.String,System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType)">
            <summary>
            执行存储过程
            </summary>
            <param name="logicDbName">存储过程名称</param>
            <param name="procName">存储过程名称</param>
            <param name="parameters">查询参数</param>
            <param name="extendParams"> 指令参数：如timeout</param>
            <param name="operationType">操作类型，读写分离，默认从master库读取</param>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.ExecListBySp``1(System.String,Arch.Data.DbEngine.StatementParameterCollection)">
            <summary>
            执行查询存储过程
            </summary>
            <typeparam name="T">结果类型</typeparam>
            <param name="procName">存储过程名称</param>
            <param name="parameters">存储过程参数</param>
            <returns>对象集合</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.ExecListBySp``1(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary)">
            <summary>
            执行查询存储过程
            </summary>
            <typeparam name="T">结果类型</typeparam>
            <param name="procName">存储过程名称</param>
            <param name="parameters">存储过程参数</param>
            <param name="extendParams">指令参数：如timeout</param>
            <returns>对象集合</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.ExecListBySp``1(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType)">
            <summary>
            执行查询存储过程
            </summary>
            <typeparam name="T">结果类型</typeparam>
            <param name="procName">存储过程名称</param>
            <param name="parameters">存储过程参数</param>
            <param name="extendParams">指令参数：如timeout</param>
            <param name="operationType">操作类型，读写分离，默认从master库读取</param>
            <returns>对象集合</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.ExecListBySp``1(System.String,System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType)">
            <summary>
            执行查询存储过程
            </summary>
            <typeparam name="T">结果类型</typeparam>
            <param name="logicDbName">逻辑数据库名</param>
            <param name="procName">存储过程名称</param>
            <param name="parameters">存储过程参数</param>
            <param name="extendParams">指令参数：如timeout</param>
            <param name="operationType">操作类型，读写分离，默认从master库读取</param>
            <returns>对象集合</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.ExecDataSetBySp(System.String,Arch.Data.DbEngine.StatementParameterCollection)">
            <summary>
            通过存储过程执行dataset
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameters">全部存储过程参数</param>
            <returns>DataSet,当所执行的存储过程返回结果集时使用。</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.ExecDataSetBySp(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary)">
            <summary>
            通过存储过程执行dataset
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameters">查询参数</param>
            <param name="extendParams">指令参数：如timeout</param>
            <returns>DataSet,当所执行的存储过程返回结果集时使用。</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.ExecDataSetBySp(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType)">
            <summary>
            通过存储过程执行dataset
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameters">查询参数</param>
            <param name="extendParams">指令参数：如timeout</param>
            <param name="operationType">操作类型，读写分离，默认从master库读取</param>
            <returns>DataSet,当所执行的存储过程返回结果集时使用。</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.ExecDataSetBySp(System.String,System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType)">
            <summary>
            通过存储过程执行dataset
            </summary>
            <param name="logicDbName">逻辑数据库名</param>
            <param name="procName">存储过程名称</param>
            <param name="parameters">存储过程参数</param>
            <param name="extendParams">指令参数：如timeout </param>
            <param name="operationType">操作类型，读写分离，默认从master库读取</param>
            <returns>DataSet,当所执行的存储过程返回结果集时使用。</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.ExecDataTableBySp(System.String,Arch.Data.DbEngine.StatementParameterCollection)">
            <summary>
            通过存储过程执行DataTable
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameters">全部存储过程参数</param>
            <returns>DataTable，当所执行的存储过程返回结果集时使用。</returns>
            <example>
            SP返回数据集：
            =========SP返回数据集========
            create PROCEDURE PeopleDetail @peopleid int AS
            select People.PeopleID, People.CityID, People.CountryID, People.Name, People.ProvinceID from People
            where People.PeopleID = @peopleid
            =============================
            
                            string sSP = @"PeopleDetail";
                            var dic = new StatementParameterCollection();
                            dic.AddInParameter("@peopleid", DbType.Int32, id);
                            DataTable table = baseDao.ExecDataTableBySp(sSP, dic);
                            //... 获取数据
            
            </example>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.ExecDataTableBySp(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary)">
            <summary>
            通过存储过程执行DataTable
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameters">全部存储过程参数</param>
            <param name="extendParams">指令参数：如timeout</param>
            <returns>DataTable，当所执行的存储过程返回结果集时使用。</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.ExecDataTableBySp(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType)">
            <summary>
            通过存储过程执行DataTable
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameters">全部存储过程参数</param>
            <param name="extendParams">指令参数：如timeout</param>
            <param name="operationType">操作类型，读写分离，默认从master库读取</param>
            <returns>DataTable，当所执行的存储过程返回结果集时使用。</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.ExecDataTableBySp(System.String,System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType)">
            <summary>
             通过存储过程执行DataTable
            </summary>
            <param name="logicDbName">逻辑数据库名</param>
            <param name="procName">存储过程名称</param>
            <param name="parameters">全部存储过程参数</param>
            <param name="extendParams">指令参数：如timeout</param>
            <param name="operationType">操作类型，读写分离，默认从master库读取</param>
            <returns>DataTable，当所执行的存储过程返回结果集时使用。</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.ExecDataReaderBySp(System.String,Arch.Data.DbEngine.StatementParameterCollection)">
            <summary>
            通过存储过程执行DataReader
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameters">存储过程参数</param>
            <returns>IDataReader，当所执行的存储过程返回结果集时使用。</returns>
            <example>
            SP返回数据集：
            =========SP返回数据集========
            create PROCEDURE PeopleDetail @peopleid int AS
            select People.PeopleID, People.CityID, People.CountryID, People.Name, People.ProvinceID from People
            where People.PeopleID = @peopleid
            =============================
            
                            string sSP = @"PeopleDetail";
                            var dic = new StatementParameterCollection();
                            dic.AddInParameter("@peopleid", DbType.Int32, id);
                            using (IDataReader reader = baseDao.ExecDataReaderBySp(sSP, dic))
                            {
                                //... 获取数据
                            }
            
            </example>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.ExecDataReaderBySp(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary)">
            <summary>
            通过存储过程执行DataReader
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameters">存储过程参数</param>
            <param name="extendParams">指令参数：如timeout</param>
            <returns>IDataReader，当所执行的存储过程返回结果集时使用。</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.ExecDataReaderBySp(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType)">
            <summary>
            通过存储过程执行DataReader
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameters">存储过程参数</param>
            <param name="extendParams">指令参数：如timeout</param>
            <param name="operationType">操作类型，读写分离，默认从master库读取 </param>
            <returns>IDataReader，当所执行的存储过程返回结果集时使用。</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.ExecDataReaderBySp(System.String,System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType)">
            <summary>
            通过存储过程执行DataReader
            </summary>
            <param name="logicDbName">逻辑数据库名</param>
            <param name="procName">存储过程名称</param>
            <param name="parameters">存储过程参数</param>
            <param name="extendParams">指令参数：如timeout</param>
            <param name="operationType">操作类型，读写分离，默认从master库读取</param>
            <returns>IDataReader，当所执行的存储过程返回结果集时使用。</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.VisitDataReaderBySp``1(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Func{System.Data.IDataReader,``0})">
            <summary>
            通过存储过程执行DataReader，并返回结果（null，0或者指定的结果类型）
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="procName">存储过程名称</param>
            <param name="parameters">存储过程参数</param>
            <param name="callback">回调，接受IDataReader为参数，返回指定的类型结果</param>
            <returns>T的实例，可能为null或者0</returns>
        </member>
        <member name="M:Arch.Data.IBaseDao.VisitDataReaderBySp``1(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary,System.Func{System.Data.IDataReader,``0})">
            <summary>
            通过存储过程执行DataReader，并返回结果（null，0或者指定的结果类型）
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="procName">存储过程名称</param>
            <param name="parameters">存储过程参数</param>
            <param name="extendParams">指令参数：如timeout</param>
            <param name="callback">回调，接受IDataReader为参数，返回指定的类型结果</param>
            <returns>T的实例，可能为null或者0</returns>
        </member>
        <member name="M:Arch.Data.IBaseDao.VisitDataReaderBySp``1(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType,System.Func{System.Data.IDataReader,``0})">
            <summary>
            通过存储过程执行DataReader，并返回结果（null，0或者指定的结果类型）
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="procName">存储过程名称</param>
            <param name="parameters">存储过程参数</param>
            <param name="extendParams">指令参数：如timeout</param>
            <param name="operationType">操作类型，读写分离，默认从master库读取</param>
            <param name="callback">回调，接受IDataReader为参数，返回指定的类型结果</param>
            <returns>T的实例，可能为null或者0</returns>
        </member>
        <member name="M:Arch.Data.IBaseDao.VisitDataReaderBySp``1(System.String,System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType,System.Func{System.Data.IDataReader,``0})">
            <summary>
            通过存储过程执行DataReader，并返回结果（null，0或者指定的结果类型）
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="logicDbName">逻辑数据库名</param>
            <param name="procName">存储过程名称</param>
            <param name="parameters">存储过程参数</param>
            <param name="extendParams">指令参数：如timeout</param>
            <param name="operationType">操作类型，读写分离，默认从master库读取</param>
            <param name="callback">回调，接受IDataReader为参数，返回指定的类型结果</param>
            <returns>T的实例，可能为null或者0</returns>
        </member>
        <member name="M:Arch.Data.IBaseDao.ExecScalar(System.String)">
            <summary>
            执行单返回值聚集查询指令，一般聚合操作比如count，max，min等和含自增长id的表进行insert时可以获取新行的自增长id
            </summary>
            <param name="sql">sql语句</param>
            <returns>object, 返回sql执行结果的第一行第一列，如果SQL执行结果为0行，则返回null。</returns>
            <example>
            判断是否对象是否存在：
                            string sSQL = @"select count(1) from people where name = @name";
                            var dic = new StatementParameterCollection();
                            dic.AddInParameter("@name", DbType.String, name);
                            object obj = baseDao.ExecScalar(sSQL, dic);
                            int ret = Convert.ToInt32(obj);
                            return ret &gt; 0;
            </example>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.ExecScalar(System.String,Arch.Data.DbEngine.StatementParameterCollection)">
            <summary>
            执行单返回值聚集查询指令
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameters">查询参数</param>
            <returns>object, 返回sql执行结果的第一行第一列，如果SQL执行结果为0行，则返回null。</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.ExecScalar(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary)">
            <summary>
            执行单返回值聚集查询指令
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameters">查询参数</param>
            <param name="extendParams">指令参数：如timeout</param>
            <returns>object, 返回sql执行结果的第一行第一列，如果SQL执行结果为0行，则返回null。</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.ExecScalar(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType)">
            <summary>
            执行单返回值聚集查询指令
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameters">查询参数</param>
            <param name="extendParams">指令参数：如timeout</param>
            <param name="operationType">操作类型，读写分离，默认从master库读取</param>
            <returns>object, 返回sql执行结果的第一行第一列，如果SQL执行结果为0行，则返回null。</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.ExecScalar(System.String,System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType)">
            <summary>
            执行单返回值聚集查询指令
            </summary>
            <param name="logicDbName">逻辑数据库名</param>
            <param name="sql">sql语句</param>
            <param name="parameters">查询参数</param>
            <param name="extendParams">指令参数：如timeout</param>
            <param name="operationType">操作类型，读写分离，默认从master库读取</param>
            <returns>object, 返回sql执行结果的第一行第一列，如果SQL执行结果为0行，则返回null。</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.ExecNonQuery(System.String)">
            <summary>
            执行非查询指令，主要insert，update，delete查看发生改动的行数时使用。
            </summary>
            <param name="sql">sql语句</param>
            <returns>影响行数</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.ExecNonQuery(System.String,Arch.Data.DbEngine.StatementParameterCollection)">
            <summary>
            执行非查询指令
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameters">查询参数</param>
            <returns>影响行数</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.ExecNonQuery(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary)">
            <summary>
            执行非查询指令，主要insert，update，delete查看发生改动的行数时使用。
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameters">查询参数</param>
            <param name="extendParams">指令参数：如timeout</param>
            <returns>影响行数</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.ExecNonQuery(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType)">
            <summary>
            执行非查询指令，主要insert，update，delete查看发生改动的行数时使用。
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameters">查询参数</param>
            <param name="extendParams">指令参数：如timeout</param>
            <param name="operationType">操作类型，读写分离，默认从master库读取</param>
            <returns>影响行数</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="M:Arch.Data.IBaseDao.ExecNonQuery(System.String,System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary,Arch.Data.DbEngine.OperationType)">
            <summary>
            执行非查询指令，主要insert，update，delete查看发生改动的行数时使用。
            </summary>
            <param name="logicDbName">逻辑数据库名</param>
            <param name="sql">sql语句</param>
            <param name="parameters">查询参数</param>
            <param name="extendParams">指令参数：如timeout</param>
            <param name="operationType">操作类型，读写分离，默认从master库读取</param>
            <returns>影响行数</returns>
            <exception cref="T:Arch.Data.DalException">数据访问框架异常</exception>
        </member>
        <member name="F:Arch.Data.Common.Logging.Configuration.ListenerElement.c_NameProperty">
            <summary>
            名称
            </summary>
        </member>
        <member name="F:Arch.Data.Common.Logging.Configuration.ListenerElement.c_TypeProperty">
            <summary>
            类型
            </summary>
        </member>
        <member name="F:Arch.Data.Common.Logging.Configuration.ListenerElement.c_LevelProperty">
            <summary>
            日志级别
            </summary>
        </member>
        <member name="F:Arch.Data.Common.Logging.Configuration.ListenerElement.c_SettingProperty">
            <summary>
            初始化配置
            </summary>
        </member>
        <member name="P:Arch.Data.Common.Logging.Configuration.ListenerElement.Name">
            <summary>
            名称,关键字
            </summary>
        </member>
        <member name="P:Arch.Data.Common.Logging.Configuration.ListenerElement.Level">
            <summary>
            级别
            </summary>
        </member>
        <member name="P:Arch.Data.Common.Logging.Configuration.ListenerElement.TypeName">
            <summary>
            类型名称
            </summary>
        </member>
        <member name="P:Arch.Data.Common.Logging.Configuration.ListenerElement.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:Arch.Data.Common.Logging.Configuration.ListenerElement.Setting">
            <summary>
            初始化配置
            </summary>
        </member>
        <member name="T:Arch.Data.Common.Logging.Configuration.ListenerElementCollection">
            <summary>
            日志侦听器集合
            </summary>
        </member>
        <member name="T:Arch.Data.Common.Logging.Configuration.LoggingSection">
            <summary>
            日志配置节
            </summary> 
        </member>
        <member name="F:Arch.Data.Common.Logging.Configuration.LoggingSection.c_NameProperty">
            <summary>
            名称
            </summary>
        </member>
        <member name="F:Arch.Data.Common.Logging.Configuration.LoggingSection.SectionName">
            <summary>
            Db引擎配置节名称
            </summary>
        </member>
        <member name="F:Arch.Data.Common.Logging.Configuration.LoggingSection.m_Listensers">
            <summary>
            日志侦听器
            </summary>
        </member>
        <member name="M:Arch.Data.Common.Logging.Configuration.LoggingSection.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:Arch.Data.Common.Logging.Configuration.LoggingSection.GetConfig">
            <summary>
            获取日志配置节
            </summary>
            <returns></returns>
        </member>
        <member name="P:Arch.Data.Common.Logging.Configuration.LoggingSection.Name">
            <summary>
            名称,关键字
            </summary>
        </member>
        <member name="P:Arch.Data.Common.Logging.Configuration.LoggingSection.Listensers">
            <summary>
            日志侦听器
            </summary>
        </member>
        <member name="T:Arch.Data.Common.Logging.ListenerManager">
            <summary>
            侦听器管理器
            </summary>
        </member>
        <member name="M:Arch.Data.Common.Logging.ListenerManager.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:Arch.Data.Common.Logging.ListenerManager.#ctor(System.Collections.Generic.IEnumerable{Arch.Data.Common.Logging.IListener})">
            <summary>
            构造方法
            </summary>
            <param name="listeners">侦听器</param>
        </member>
        <member name="M:Arch.Data.Common.Logging.ListenerManager.Finalize">
            <summary>
            析构器
            </summary>
        </member>
        <member name="M:Arch.Data.Common.Logging.ListenerManager.Dispose(System.Boolean)">
            <summary>
            真正的资源释放程序
            </summary>
            <param name="isDisposing">是否正在主动释放</param>
        </member>
        <member name="M:Arch.Data.Common.Logging.ListenerManager.Dispose">
            <summary>
            显示释放
            </summary>
        </member>
        <member name="M:Arch.Data.Common.Logging.ListenerManager.AddListener(Arch.Data.Common.Logging.IListener)">
            <summary>
            添加侦听器
            </summary>
            <param name="listener">侦听器</param>
        </member>
        <member name="M:Arch.Data.Common.Logging.ListenerManager.Log(Arch.Data.Common.Logging.LogEntry)">
            <summary>
            日志
            </summary>
            <param name="logEntry">日志项</param>
        </member>
        <member name="T:Arch.Data.Common.Logging.Listeners.ConsoleListener">
            <summary>
            控制台侦听器
            </summary>
        </member>
        <member name="T:Arch.Data.Common.Logging.Listeners.TextFileListener">
            <summary>
            文本文件日志侦听器
            </summary>
        </member>
        <member name="M:Arch.Data.Common.Logging.Listeners.TextFileListener.Init(System.String,Arch.Data.Common.Logging.LogLevel,System.String)">
            <summary>
            初始化
            </summary>
            <param name="config">配置项</param>
        </member>
        <member name="P:Arch.Data.Common.Logging.Listeners.TextFileListener.FileNamePattern">
            <summary>
            文本文件名称
            </summary>
        </member>
        <member name="T:Arch.Data.Common.Logging.LogEntry">
            <summary>
            日志对象
            </summary>
        </member>
        <member name="F:Arch.Data.Common.Logging.LogEntry.m_TimeStamp">
            <summary>
            创建时间戳
            </summary>
        </member>
        <member name="F:Arch.Data.Common.Logging.LogEntry.m_Machine">
            <summary>
            调用机器名称
            </summary>
        </member>
        <member name="F:Arch.Data.Common.Logging.LogEntry.m_InputParameters">
            <summary>
            输入参数
            对input特殊处理：inputoutput参数在执行前后值会不同
            </summary>
        </member>
        <member name="M:Arch.Data.Common.Logging.LogEntry.ToString">
            <summary>
            获取LogEntry字符串表示
            </summary>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Common.Logging.LogEntry.ToBrief">
            <summary>
            获取LogEntry字符串概要表示，用于Central Logging等本身已生成date, appid, machine, level等字段的日志工具
            </summary>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Common.Logging.LogEntry.ToJson">
            <summary>
            获取 LogEntry，根据 Sql Log记录方式详细方案（V1.2）生成 JSON 字符串
            </summary>
            <returns></returns>
        </member>
        <member name="P:Arch.Data.Common.Logging.LogEntry.LogName">
            <summary>
            日志名称
            </summary>
        </member>
        <member name="P:Arch.Data.Common.Logging.LogEntry.LogSource">
            <summary>
            日志来源
            </summary>
        </member>
        <member name="P:Arch.Data.Common.Logging.LogEntry.Level">
            <summary>
            日志级别
            </summary>
        </member>
        <member name="P:Arch.Data.Common.Logging.LogEntry.EventID">
            <summary>
            事件编号，当发生DbException时，为DB给出的ErrorCode，其他异常由DAL定义
            </summary>
        </member>
        <member name="P:Arch.Data.Common.Logging.LogEntry.Message">
            <summary>
            日志详情
            </summary>
        </member>
        <member name="P:Arch.Data.Common.Logging.LogEntry.SQLStatement">
            <summary>
            SQL Statement 
            </summary>
        </member>
        <member name="P:Arch.Data.Common.Logging.LogEntry.InputParameters">
            <summary>
            输入参数
            </summary>
        </member>
        <member name="P:Arch.Data.Common.Logging.LogEntry.LastDalPhase">
            <summary>
            记录Log时，某条数据访问的状态
            </summary>
        </member>
        <member name="P:Arch.Data.Common.Logging.LogEntry.TracingMetaData">
            <summary>
            记录Log时，追踪的历史记录
            </summary>
        </member>
        <member name="P:Arch.Data.Common.Logging.LogEntry.BelongTraceId">
            <summary>
            子线程ContinueSpan时，绑定到该TraceID
            </summary>
        </member>
        <member name="P:Arch.Data.Common.Logging.LogEntry.BelongSpanId">
            <summary>
            子线程ContinueSpan时，以该Span为父ID
            </summary>
        </member>
        <member name="P:Arch.Data.Common.Logging.LogEntry.ErrorCode">
            <summary>
            CLog降噪需求的错误码，如 SYS1L1004
            </summary>
        </member>
        <member name="T:Arch.Data.Common.Logging.Logger">
            <summary>
            日志对象,在配置多个LogListener时是有坑的
            </summary>
        </member>
        <member name="M:Arch.Data.Common.Logging.Logger.WriteLog(Arch.Data.Common.Logging.LogEntry,System.Exception)">
            <summary>
            记日志
            </summary>
            <param name="logEntry">日志记录</param>
            <param name="ex">异常</param>
        </member>
        <member name="P:Arch.Data.Common.Logging.Logger.Policy">
            <summary>
            global control how to make log
            </summary>
        </member>
        <member name="T:Arch.Data.Common.Logging.LogLevel">
            <summary>
            日志级别
            不同的日志侦听器日志不同级别的日志
            </summary>
        </member>
        <member name="F:Arch.Data.Common.Logging.LogLevel.Information">
            <summary>
            信息
            </summary>
        </member>
        <member name="F:Arch.Data.Common.Logging.LogLevel.Warning">
            <summary>
            警告
            </summary>
        </member>
        <member name="F:Arch.Data.Common.Logging.LogLevel.Error">
            <summary>
            异常
            </summary>
        </member>
        <member name="F:Arch.Data.Common.Logging.LogLevel.Critical">
            <summary>
            严重异常
            </summary>
        </member>
        <member name="T:Arch.Data.Orm.ColumnAttribute">
            <summary>
            表示一个数据库中的字段
            </summary>
        </member>
        <member name="P:Arch.Data.Orm.ColumnAttribute.Name">
            <summary>
            字段名
            </summary>
        </member>
        <member name="P:Arch.Data.Orm.ColumnAttribute.Alias">
            <summary>
            字段别名
            </summary>
        </member>
        <member name="P:Arch.Data.Orm.ColumnAttribute.ColumnType">
            <summary>
            字段所对应的数据库类型
            </summary>
        </member>
        <member name="P:Arch.Data.Orm.ColumnAttribute.DefaultValue">
            <summary>
            查询ORM时的默认值，不支持NULL作为默认值
            </summary>
        </member>
        <member name="P:Arch.Data.Orm.ColumnAttribute.NullableColumnType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Arch.Data.Orm.ColumnAttribute.Length">
            <summary>
            字段的大小
            </summary>
        </member>
        <member name="T:Arch.Data.Orm.Dialect.DbDialect">
            <summary>
            
            </summary>
        </member>
        <member name="T:Arch.Data.Orm.Dialect.IDbDialect">
            <summary>
            数据库方言接口
            </summary>
        </member>
        <member name="M:Arch.Data.Orm.Dialect.IDbDialect.QuoteParameter(System.String)">
            <summary>
            拼接参数
            </summary>
        </member>
        <member name="M:Arch.Data.Orm.Dialect.IDbDialect.QuotePKParameter(System.String)">
            <summary>
            拼接参数
            </summary>
        </member>
        <member name="M:Arch.Data.Orm.Dialect.IDbDialect.QuotePrefixParameter(System.String)">
            <summary>
            
            </summary>
            <param name="parameterName"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.Dialect.IDbDialect.Quote(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.Dialect.IDbDialect.QuoteOpenOpName(System.String)">
            <summary>
            拼接操作头部
            </summary>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.Dialect.IDbDialect.QuoteCloseOpName">
            <summary>
            拼接操作尾部
            </summary>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.Dialect.IDbDialect.WithLock(System.String)">
            <summary>
            加nolock
            </summary>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.Dialect.IDbDialect.LimitPrefix(System.Int32,System.Int32)">
            <summary>
            如果是Top，取用from，拼接
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.Dialect.IDbDialect.LimitSuffix(System.Int32,System.Int32)">
            <summary>
            如果是Limit，取用from和to拼接
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.Dialect.IDbDialect.PagingPrefix(System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="orderColumnName"></param>
            <param name="isAscending"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.Dialect.IDbDialect.PagingSuffix(System.Int32,System.Int32,System.String,System.Boolean,System.Collections.Generic.IList{Arch.Data.Orm.sql.SqlColumn})">
            <summary>
            
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="orderColumnName"></param>
            <param name="isAscending"></param>
            <param name="sqlColumns"></param>
            <returns></returns>
        </member>
        <member name="P:Arch.Data.Orm.Dialect.IDbDialect.OpenQuote">
            <summary>
            结束
            </summary>
        </member>
        <member name="P:Arch.Data.Orm.Dialect.IDbDialect.CloseQuote">
            <summary>
            结束引号
            </summary>
        </member>
        <member name="P:Arch.Data.Orm.Dialect.IDbDialect.IdentitySelectString">
            <summary>
            标识返回自增长id
            </summary>
        </member>
        <member name="M:Arch.Data.Orm.Dialect.DbDialect.QuoteParameter(System.String)">
            <summary>
            拼接参数
            </summary>
        </member>
        <member name="M:Arch.Data.Orm.Dialect.DbDialect.QuotePKParameter(System.String)">
            <summary>
            拼接参数
            </summary>
        </member>
        <member name="M:Arch.Data.Orm.Dialect.DbDialect.Quote(System.String)">
            <summary>
            拼接名称
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.Dialect.DbDialect.QuoteOpenOpName(System.String)">
            <summary>
            拼接操作头部
            </summary>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.Dialect.DbDialect.QuoteCloseOpName">
            <summary>
            拼接操作尾部
            </summary>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.Dialect.DbDialect.WithLock(System.String)">
            <summary>
            加锁类型值
            </summary>
            <returns></returns>
        </member>
        <member name="P:Arch.Data.Orm.Dialect.DbDialect.OpenQuote">
            <summary>
            开始引号
            </summary>
        </member>
        <member name="P:Arch.Data.Orm.Dialect.DbDialect.CloseQuote">
            <summary>
            结束引号
            </summary>
        </member>
        <member name="P:Arch.Data.Orm.Dialect.DbDialect.IdentitySelectString">
            <summary>
            标识返回自增长id
            </summary>
        </member>
        <member name="T:Arch.Data.Orm.Dialect.DbDialectFactory">
            <summary>
            方言工厂
            </summary>
        </member>
        <member name="M:Arch.Data.Orm.Dialect.DbDialectFactory.Build(Arch.Data.Common.Enums.DatabaseProviderType)">
            <summary>
            构建方言
            </summary>
            <param name="dbTypeName">数据库类型</param>
            <returns></returns>
        </member>
        <member name="T:Arch.Data.Orm.Dialect.MySqlDialect">
            <summary>
            MySql方言
            </summary>
        </member>
        <member name="M:Arch.Data.Orm.Dialect.MySqlDialect.QuoteOpenOpName(System.String)">
            <summary>
            拼接操作头部
            </summary>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.Dialect.MySqlDialect.WithLock(System.String)">
            <summary>
            加锁类型值
            </summary>
            <returns></returns>
        </member>
        <member name="T:Arch.Data.Orm.Dialect.SqlServer2008Dialect">
            <summary>
            SqlServer2008方言
            </summary>
        </member>
        <member name="M:Arch.Data.Orm.Dialect.SqlServer2008Dialect.QuoteOpenOpName(System.String)">
            <summary>
            拼接操作头部
            </summary>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.Dialect.SqlServer2008Dialect.QuoteCloseOpName">
            <summary>
            拼接操作尾部
            </summary>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.Dialect.SqlServer2008Dialect.WithLock(System.String)">
            <summary>
            加锁类型值
            </summary>
            <param name="parameterName"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.FastInvoker.DynamicMethodFactory.CreateDynamicConstructorInfoHandler(System.Type,System.Reflection.ConstructorInfo)">
            <summary>
            创建构造函数
            </summary>
            <param name="type"></param>
            <param name="constructorInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.FastInvoker.DynamicMethodFactory.CreateGetHandler(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            创建PropertyInfo的动态方法get
            </summary>
            <param name="type"></param>
            <param name="propertyInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.FastInvoker.DynamicMethodFactory.CreateSetHandler(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            创建PropertyInfo的动态方法Set
            </summary>
            <param name="type"></param>
            <param name="propertyInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.FastInvoker.DynamicMethodFactory.CreateGetHandler(System.Type,System.Reflection.FieldInfo)">
            <summary>
            创建Field的动态方法get
            </summary>
            <param name="type"></param>
            <param name="fieldInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.FastInvoker.DynamicMethodFactory.CreateSetHandler(System.Type,System.Reflection.FieldInfo)">
            <summary>
            创建Field的动态方法set
            </summary>
            <param name="type"></param>
            <param name="fieldInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.FastInvoker.DynamicPropertyInfo.GetValue(System.Object,System.Object[])">
            <summary>
            获取属性值
            </summary>
            <param name="obj">对象</param>
            <param name="index">检索</param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.FastInvoker.OpCodesFactory.GetLdc_I4(System.Int32)">
            <summary>
            压入整数堆栈方法
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.FastInvoker.OpCodesFactory.GetLdelem(System.Type)">
            <summary>
            根据传入的数据类型，获取数组元素的op
            </summary>
            <param name="reflectType"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.FastInvoker.OpCodesFactory.BoxIfNeeded(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            判断是否需要装箱
            </summary>
            <param name="generator"></param>
            <param name="type"></param>
        </member>
        <member name="M:Arch.Data.Orm.FastInvoker.OpCodesFactory.UnboxIfNeeded(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            判断是否需要拆箱
            </summary>
            <param name="generator"></param>
            <param name="type"></param>
        </member>
        <member name="T:Arch.Data.Orm.FastInvoker.ReflectorHelper">
            <summary>
            反射帮助类
            </summary>
        </member>
        <member name="M:Arch.Data.Orm.FastInvoker.ReflectorHelper.GetProperty``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Gets the property represented by the lambda expression.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.FastInvoker.ReflectorHelper.GetField``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Gets the field represented by the lambda expression.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="T:Arch.Data.Orm.IConstraint">
            <summary>
            约束接口
            </summary>
        </member>
        <member name="P:Arch.Data.Orm.IConstraint.Column">
            <summary>
            别名
            </summary>
        </member>
        <member name="P:Arch.Data.Orm.IConstraint.Operator">
            <summary>
            操作，例如：=
            </summary>
        </member>
        <member name="P:Arch.Data.Orm.IConstraint.Value">
            <summary>
            
            </summary>
        </member>
        <member name="P:Arch.Data.Orm.IConstraint.HasQuery">
            <summary>
            
            </summary>
        </member>
        <member name="P:Arch.Data.Orm.IConstraint.Query">
            <summary>
            
            </summary>
        </member>
        <member name="T:Arch.Data.Orm.IQuery`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Arch.Data.Orm.IQuery">
            <summary>
            
            </summary>
        </member>
        <member name="M:Arch.Data.Orm.IQuery.And">
            <summary>
            和操作
            </summary>
            <returns>查询对象接口</returns>
        </member>
        <member name="M:Arch.Data.Orm.IQuery.Or">
            <summary>
            或操作
            </summary>
            <returns>查询对象接口</returns>
        </member>
        <member name="M:Arch.Data.Orm.IQuery.Constrain(System.String)">
            <summary>
            包含操作
            </summary>
            <param name="column">列名</param>
            <returns>查询对象接口</returns>
        </member>
        <member name="M:Arch.Data.Orm.IQuery.Constrain(Arch.Data.Orm.IQuery)">
            <summary>
            包含操作
            </summary>
            <param name="query">查询对象</param>
            <returns>查询对象接口</returns>
        </member>
        <member name="M:Arch.Data.Orm.IQuery.Equal(System.Object)">
            <summary>
            等于操作
            </summary>
            <param name="val">值</param>
            <returns>查询对象接口</returns>
        </member>
        <member name="M:Arch.Data.Orm.IQuery.NotEqual(System.Object)">
            <summary>
            不等于操作
            </summary>
            <param name="val">值</param>
            <returns>查询对象接口</returns>
        </member>
        <member name="M:Arch.Data.Orm.IQuery.Greater(System.Object)">
            <summary>
            大于操作
            </summary>
            <param name="val">值</param>
            <returns>查询对象接口</returns>
        </member>
        <member name="M:Arch.Data.Orm.IQuery.GreaterEqual(System.Object)">
            <summary>
            大于等于操作
            </summary>
            <param name="val">值</param>
            <returns>查询对象接口</returns>
        </member>
        <member name="M:Arch.Data.Orm.IQuery.Less(System.Object)">
            <summary>
            小于操作
            </summary>
            <param name="val">值</param>
            <returns>查询对象接口</returns>
        </member>
        <member name="M:Arch.Data.Orm.IQuery.LessEqual(System.Object)">
            <summary>
            小于等于操作
            </summary>
            <param name="val">值</param>
            <returns>查询对象接口</returns>
        </member>
        <member name="M:Arch.Data.Orm.IQuery.Like(System.String)">
            <summary>
             like操作需要在dao方法内加通配符(%)
            </summary>
            <param name="val">值</param>
            <returns>查询对象接口</returns>
        </member>
        <member name="M:Arch.Data.Orm.IQuery.Like(System.String,System.Object)">
            <summary>
             like操作需要在dao方法内加通配符(%)
            </summary>
            <param name="fieldName">字段名</param>
            <param name="val">值</param>
            <returns>查询对象接口</returns>
        </member>
        <member name="M:Arch.Data.Orm.IQuery.In(System.Collections.IList)">
            <summary>
            在范围内操作
            </summary>
            <param name="values">集合接口</param>
            <returns>查询对象接口</returns>
        </member>
        <member name="M:Arch.Data.Orm.IQuery.In(System.String,System.Collections.IList)">
            <summary>
            在范围内操作
            </summary>
            <param name="fieldName"></param>
            <param name="values">集合接口</param>
            <returns>查询对象接口</returns>
        </member>
        <member name="M:Arch.Data.Orm.IQuery.NotIn(System.Collections.IList)">
            <summary>
            不在范围内操作
            </summary>
            <param name="values">集合接口</param>
            <returns>查询对象接口</returns>
        </member>
        <member name="M:Arch.Data.Orm.IQuery.Order(System.String,System.Boolean)">
            <summary>
            排序
            </summary>
            <param name="column">列名</param>
            <param name="ascending">是否升序</param>
            <returns>查询对象接口</returns>
        </member>
        <member name="M:Arch.Data.Orm.IQuery.Get(System.Int32)">
            <summary>
            获得约束对象
            </summary>
            <param name="index">索引</param>
            <returns>约束接口</returns>
        </member>
        <member name="M:Arch.Data.Orm.IQuery.Limit(System.Int32,System.Int32)">
            <summary>
            Sql Server Top 或者 MySql Limit
            </summary>
            <param name="from">如Top 10 或者 limit 10</param>
            <param name="to">只针对MySql有效，如 limit 10, 20</param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.IQuery.Between(System.Object,System.Object)">
            <summary>
            SQL的Between功能
            </summary>
            <param name="start">Between的起始点</param>
            <param name="end">Between的结束点</param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.IQuery.Between(System.String,System.Object,System.Object)">
            <summary>
            SQL的Between功能
            </summary>
            <param name="fieldName"></param>
            <param name="start">Between的起始点</param>
            <param name="end">Between的结束点</param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.IQuery.Paging(System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            分页功能
            </summary>
            <param name="pageNumber">当前第几页</param>
            <param name="pageSize">每页显示多少数据</param>
            <param name="orderColumnName">排序的列，目前只支持一个列</param>
            <param name="isAscending">是否安装升序排序</param>
            <returns>当前IQuery对象</returns>
        </member>
        <member name="M:Arch.Data.Orm.IQuery`1.And">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.IQuery`1.Constrain(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            
            </summary>
            <param name="propertyExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.IQuery`1.Order(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean)">
            <summary>
            
            </summary>
            <param name="propertyExpression"></param>
            <param name="asc"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.IQuery`1.Order(System.String,System.Boolean)">
            <summary>
            排序
            </summary>
            <param name="column">列名</param>
            <param name="ascending">是否升序</param>
            <returns>查询对象接口</returns>
        </member>
        <member name="M:Arch.Data.Orm.IQuery`1.Get(System.Int32)">
            <summary>
            获得约束对象
            </summary>
            <param name="index">索引</param>
            <returns>约束接口</returns>
        </member>
        <member name="M:Arch.Data.Orm.IQuery`1.Or">
            <summary>
            或操作
            </summary>
            <returns>查询对象接口</returns>
        </member>
        <member name="M:Arch.Data.Orm.IQuery`1.Constrain(System.String)">
            <summary>
            包含操作
            </summary>
            <param name="column">列名</param>
            <returns>查询对象接口</returns>
        </member>
        <member name="M:Arch.Data.Orm.IQuery`1.Constrain(Arch.Data.Orm.IQuery)">
            <summary>
            包含操作
            </summary>
            <param name="query">查询对象</param>
            <returns>查询对象接口</returns>
        </member>
        <member name="M:Arch.Data.Orm.IQuery`1.Equal(System.Object)">
            <summary>
            等于操作
            </summary>
            <param name="val">值</param>
            <returns>查询对象接口</returns>
        </member>
        <member name="M:Arch.Data.Orm.IQuery`1.NotEqual(System.Object)">
            <summary>
            不等于操作
            </summary>
            <param name="val">值</param>
            <returns>查询对象接口</returns>
        </member>
        <member name="M:Arch.Data.Orm.IQuery`1.Greater(System.Object)">
            <summary>
            大于操作
            </summary>
            <param name="val">值</param>
            <returns>查询对象接口</returns>
        </member>
        <member name="M:Arch.Data.Orm.IQuery`1.GreaterEqual(System.Object)">
            <summary>
            大于等于操作
            </summary>
            <param name="val">值</param>
            <returns>查询对象接口</returns>
        </member>
        <member name="M:Arch.Data.Orm.IQuery`1.Less(System.Object)">
            <summary>
            小于操作
            </summary>
            <param name="val">值</param>
            <returns>查询对象接口</returns>
        </member>
        <member name="M:Arch.Data.Orm.IQuery`1.LessEqual(System.Object)">
            <summary>
            小于等于操作
            </summary>
            <param name="val">值</param>
            <returns>查询对象接口</returns>
        </member>
        <member name="M:Arch.Data.Orm.IQuery`1.Like(System.String)">
            <summary>
             like操作需要在dao方法内加通配符(%)
            </summary>
            <param name="val">值</param>
            <returns>查询对象接口</returns>
        </member>
        <member name="M:Arch.Data.Orm.IQuery`1.Like(System.String,System.Object)">
            <summary>
             like操作需要在dao方法内加通配符(%)
            </summary>
            <param name="fieldName">字段名</param>
            <param name="val">值</param>
            <returns>查询对象接口</returns>
        </member>
        <member name="M:Arch.Data.Orm.IQuery`1.In(System.Collections.IList)">
            <summary>
            在范围内操作
            </summary>
            <param name="values">集合接口</param>
            <returns>查询对象接口</returns>
        </member>
        <member name="M:Arch.Data.Orm.IQuery`1.In(System.String,System.Collections.IList)">
            <summary>
            在范围内操作
            </summary>
            <param name="fieldName"></param>
            <param name="values">集合接口</param>
            <returns>查询对象接口</returns>
        </member>
        <member name="M:Arch.Data.Orm.IQuery`1.NotIn(System.Collections.IList)">
            <summary>
            不在范围内操作
            </summary>
            <param name="values">集合接口</param>
            <returns>查询对象接口</returns>
        </member>
        <member name="M:Arch.Data.Orm.IQuery`1.Limit(System.Int32,System.Int32)">
            <summary>
            Sql Server Top 或者 MySql Limit
            </summary>
            <param name="num1">如Top 10 或者 limit 10</param>
            <param name="num2">只针对MySql有效，如 limit 10, 20</param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.IQuery`1.Between(System.Object,System.Object)">
            <summary>
            SQL的Between功能
            </summary>
            <param name="start">Between的起始点</param>
            <param name="end">Between的结束点</param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.IQuery`1.Between(System.String,System.Object,System.Object)">
            <summary>
            SQL的Between功能
            </summary>
            <param name="start">Between的起始点</param>
            <param name="end">Between的结束点</param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.IQuery`1.Paging(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean)">
            <summary>
            分页功能
            </summary>
            <param name="pageNumber">当前第几页,从1开始</param>
            <param name="pageSize">每页显示多少数据</param>
            <param name="propertyExpression">排序的列，目前只支持一个列</param>
            <param name="isAscending">是否安装升序排序</param>
            <returns>当前IQuery对象</returns>
        </member>
        <member name="M:Arch.Data.Orm.IQuery`1.Paging(System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            分页功能
            </summary>
            <param name="pageNumber">当前第几页,从1开始</param>
            <param name="pageSize">每页显示多少数据</param>
            <param name="orderColumnName">排序的列，目前只支持一个列</param>
            <param name="isAscending">是否安装升序排序</param>
            <returns>当前IQuery对象</returns>
        </member>
        <member name="T:Arch.Data.Orm.partially.ExpressionHelper`1">
            <summary>
            
            </summary>
            <typeparam name="T">Indicates table entity</typeparam>
        </member>
        <member name="M:Arch.Data.Orm.partially.ExpressionHelper`1.GetFieldName``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Get the field name in table according to the name property in ColumnAttibute
            </summary>
            <typeparam name="TField"></typeparam>
            <param name="setValue">lambda expression like t=>t.colname</param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.partially.IUpdatePartial`1.Set``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            使用Lambda方式指定需要更新的字段，如 p => p.ID
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="setValue"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.partially.IUpdatePartial`1.Set(System.String)">
            <summary>
            使用字段名指定需要更新的字段，性能稍微好些，如 “ID”
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.partially.IUpdatePartial`1.Sets``1(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,``0}}})">
            <summary>
            使用Lambda方式指定需要更新的字段，如 p => p.ID
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="setValues"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.partially.IUpdatePartial`1.Sets(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            使用字段名指定需要更新的字段，性能稍微好些，如 “ID”
            </summary>
            <param name="fieldNames"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.partially.IUpdatePartial`1.Where``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Update时的条件，使用字段名指定需要更新的字段，性能稍微好些，
            建议只用主键或者乐观锁字段，且目前只支持等于操作
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="setValue"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.partially.IUpdatePartial`1.Where(System.String)">
            <summary>
            Update时的条件，使用字段名指定需要更新的字段，性能稍微好些，
            建议只用主键或者乐观锁字段，且目前只支持等于操作
            </summary>
            <param name="conditionField"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.partially.IUpdatePartial`1.Where(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Update时的条件，使用字段名指定需要更新的字段，性能稍微好些，
            建议只用主键或者乐观锁字段，且目前只支持等于操作
            </summary>
            <param name="conditionFields"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.partially.IUpdatePartial`1.Where``1(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,``0}}})">
            <summary>
            Update时的条件，使用字段名指定需要更新的字段，性能稍微好些，
            建议只用主键或者乐观锁字段，且目前只支持等于操作
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="conditionFields"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.partially.IUpdatePartial`1.Validate">
            <summary>
            检查当前UpdatePartial是否合法
            </summary>
            <returns></returns>
        </member>
        <member name="P:Arch.Data.Orm.partially.IUpdatePartial`1.SetColumns">
            <summary>
            使用时请注意，IUpdatePartial在传入BaseDao执行后，SetColumns将是空集合
            </summary>
        </member>
        <member name="P:Arch.Data.Orm.partially.IUpdatePartial`1.WhereColumns">
            <summary>
            使用时，请注意，IUpdatePartial在传入BaseDao执行后，WhereColumns将是空集合
            </summary>
        </member>
        <member name="M:Arch.Data.Orm.partially.ReplacePartial`1.Replace``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Set replace field by lambda expression
            </summary>
            <typeparam name="TField"></typeparam>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.partially.ReplacePartial`1.Replace(System.String)">
            <summary>
            Set replace field by field name
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.partially.ReplacePartial`1.Replace``1(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,``0}}})">
            <summary>
            Set replace fields by lambda expression
            </summary>
            <typeparam name="TField"></typeparam>
            <param name="expressions"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.partially.ReplacePartial`1.Replace(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Set replace fields by fields name
            </summary>
            <param name="fieldsName"></param>
            <returns></returns>
        </member>
        <member name="T:Arch.Data.Orm.partially.UpdatePartial`1">
            <summary>
            部分字段更新
            </summary>
            <typeparam name="TTable"></typeparam>
        </member>
        <member name="M:Arch.Data.Orm.partially.UpdatePartial`1.Set``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            使用Lambda方式指定需要更新的字段，如 p => p.ID
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="setValue"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.partially.UpdatePartial`1.Set(System.String)">
            <summary>
            使用字段名指定需要更新的字段，性能稍微好些，如 “ID”
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.partially.UpdatePartial`1.Where``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Update时的条件，使用字段名指定需要更新的字段，性能稍微好些，
            建议只用主键或者乐观锁字段，且目前只支持等于操作
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="setValue"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.partially.UpdatePartial`1.Where(System.String)">
            <summary>
            Update时的条件，使用字段名指定需要更新的字段，性能稍微好些，
            建议只用主键或者乐观锁字段，且目前只支持等于操作
            </summary>
            <param name="conditionField"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.sql.SqlConstraint.GetSql(Arch.Data.Orm.sql.SqlTable,System.Char,System.Char,System.Int32@)">
            <summary>
            
            </summary>
            <param name="table"></param>
            <param name="openQuote"></param>
            <param name="closeQuote"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.sql.SqlConstraint.SetParameters(Arch.Data.Orm.sql.SqlTable,Arch.Data.DbEngine.StatementParameterCollection)">
            <summary>
            
            </summary>
            <param name="table"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:Arch.Data.Orm.sql.OrmUtil.GetFieldValue(System.Int32,System.Type,System.Type,System.Data.IDataReader)">
            <summary>
            
            </summary>
            <param name="columnIndex"></param>
            <param name="fieldType"></param>
            <param name="entityType"></param>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.sql.OrmUtil.GetFieldValue(System.Int32,System.Type,System.Type,System.Data.DataRow)">
            <summary>
            
            </summary>
            <param name="columnIndex"></param>
            <param name="fieldType"></param>
            <param name="entityType"></param>
            <param name="dataRow"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.sql.OrmUtil.FillFirstDataTableByName``1(System.Data.DataTable,System.Collections.Generic.List{Arch.Data.Orm.sql.SqlColumn},``0@)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dt"></param>
            <param name="columns"></param>
            <param name="obj"></param>
        </member>
        <member name="F:Arch.Data.Orm.sql.SqlBuilder.SqlInsertTemplate">
            <summary>
            "INSERT INTO {0}({1}) VALUES ({2});"
            </summary>
        </member>
        <member name="F:Arch.Data.Orm.sql.SqlBuilder.SqlReplaceTemplate">
            <summary>
            "REPLACE INTO {0}({1}) VALUES ({2});"
            </summary>
        </member>
        <member name="F:Arch.Data.Orm.sql.SqlBuilder.SqlDeleteTemplate">
            <summary>
            "DELETE FROM {0} WHERE {1};"
            </summary>
        </member>
        <member name="F:Arch.Data.Orm.sql.SqlBuilder.SqlUpdateTemplate">
            <summary>
            "UPDATE {0} SET {1} WHERE {2};"
            </summary>
        </member>
        <member name="F:Arch.Data.Orm.sql.SqlBuilder.SqlSelectTemplate">
            <summary>
            "SELECT {0} FROM {1}"
            </summary>
        </member>
        <member name="F:Arch.Data.Orm.sql.SqlBuilder.SqlSelectWhereTemplate">
            <summary>
            "SELECT {0} FROM {1} WHERE {2}"
            </summary>
        </member>
        <member name="M:Arch.Data.Orm.sql.SqlBuilder.GetAllStatement(Arch.Data.Orm.sql.SqlTable,System.String,Arch.Data.DbEngine.Sharding.IShardingStrategy,System.Collections.IDictionary,System.Nullable{Arch.Data.DbEngine.OperationType})">
            <summary>
            GetAllStatement
            </summary>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.sql.SqlBuilder.GetFindByKeyStatement(Arch.Data.Orm.sql.SqlTable,System.String,Arch.Data.DbEngine.Sharding.IShardingStrategy,System.Collections.IDictionary,System.Object,System.Nullable{Arch.Data.DbEngine.OperationType})">
            <summary>
            GetFindByKeyStatement
            </summary>
            <param name="table"></param>
            <param name="logicDbName"></param>
            <param name="shardingStrategy"></param>
            <param name="hints"></param>
            <param name="key"></param>
            <param name="operationType"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.sql.SqlBuilder.GetInsertSqlStatement``1(Arch.Data.Orm.sql.SqlTable,``0,System.String,Arch.Data.DbEngine.Sharding.IShardingStrategy,System.Collections.IDictionary,System.Boolean)">
            <summary>
            GetInsertSqlStatement
            </summary>
            <typeparam name="T"></typeparam>
            <param name="table"></param>
            <param name="item"></param>
            <param name="logicDbName"></param>
            <param name="shardingStrategy"></param>
            <param name="hints"></param>
            <param name="isCompositeKey"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.sql.SqlBuilder.GetBulkInsertSqlStatement``1(Arch.Data.Orm.sql.SqlTable,System.Collections.Generic.IList{``0},System.String,Arch.Data.DbEngine.Sharding.IShardingStrategy,System.Collections.IDictionary)">
            <summary>
            GetBulkInsertSqlStatement
            </summary>
            <typeparam name="T"></typeparam>
            <param name="table"></param>
            <param name="items"></param>
            <param name="logicDbName"></param>
            <param name="shardingStrategy"></param>
            <param name="hints"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.sql.SqlBuilder.GetReplaceSqlStatement``1(Arch.Data.Orm.sql.SqlTable,``0,System.String,Arch.Data.DbEngine.Sharding.IShardingStrategy,System.Collections.IDictionary,System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="table"></param>
            <param name="item"></param>
            <param name="logicDbName"></param>
            <param name="shardingStrategy"></param>
            <param name="hints"></param>
            <param name="isComplexPk"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.sql.SqlBuilder.GetReplacePartialSqlStatement``1(Arch.Data.Orm.sql.SqlTable,``0,System.String,Arch.Data.DbEngine.Sharding.IShardingStrategy,Arch.Data.Orm.partially.IReplacePartial{``0},System.Collections.IDictionary,System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="table"></param>
            <param name="item"></param>
            <param name="logicDbName"></param>
            <param name="shardingStrategy"></param>
            <param name="replacePartial"></param>
            <param name="hints"></param>
            <param name="isComplexPk"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.sql.SqlBuilder.GetBulkReplaceSqlStatement``1(Arch.Data.Orm.sql.SqlTable,System.Collections.Generic.IList{``0},System.String,Arch.Data.DbEngine.Sharding.IShardingStrategy,System.Collections.IDictionary)">
            <summary>
            GetBulkReplaceSqlStatement
            </summary>
            <typeparam name="T"></typeparam>
            <param name="table"></param>
            <param name="items"></param>
            <param name="logicDbName"></param>
            <param name="shardingStrategy"></param>
            <param name="hints"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.sql.SqlBuilder.GetUpdateSqlStatement``1(Arch.Data.Orm.sql.SqlTable,``0,System.String,Arch.Data.DbEngine.Sharding.IShardingStrategy,System.Collections.IDictionary)">
            <summary>
            GetUpdateSqlStatement
            </summary>
            <typeparam name="T"></typeparam>
            <param name="table"></param>
            <param name="item"></param>
            <param name="logicDbName"></param>
            <param name="shardingStrategy"></param>
            <param name="hints"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.sql.SqlBuilder.GetUpdatePartialSqlStatement``1(Arch.Data.Orm.sql.SqlTable,``0,System.String,Arch.Data.DbEngine.Sharding.IShardingStrategy,Arch.Data.Orm.partially.IUpdatePartial{``0},System.Collections.IDictionary)">
            <summary>
            GetUpdatePartialSqlStatement
            </summary>
            <typeparam name="T"></typeparam>
            <param name="table"></param>
            <param name="item"></param>
            <param name="logicDbName"></param>
            <param name="shardingStrategy"></param>
            <param name="updatePartial"></param>
            <param name="hints"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.sql.SqlBuilder.GetDeleteSqlStatement``1(Arch.Data.Orm.sql.SqlTable,``0,System.String,Arch.Data.DbEngine.Sharding.IShardingStrategy,System.Collections.IDictionary)">
            <summary>
            GetDeleteSqlStatement
            </summary>
            <typeparam name="T"></typeparam>
            <param name="table"></param>
            <param name="item"></param>
            <param name="logicDbName"></param>
            <param name="shardingStrategy"></param>
            <param name="hints"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.sql.SqlBuilder.GetSqlStatement(Arch.Data.Orm.sql.SqlTable,System.String,Arch.Data.DbEngine.Sharding.IShardingStrategy,System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary,System.Nullable{Arch.Data.DbEngine.OperationType})">
            <summary>
            GetSqlStatement
            </summary>
            <param name="table"></param>
            <param name="logicDbName"></param>
            <param name="shardingStrategy"></param>
            <param name="sql"></param>
            <param name="parameters"></param>
            <param name="extendedParameters"></param>
            <param name="operationType"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.sql.SqlBuilder.GetScalarStatement(Arch.Data.Orm.sql.SqlTable,System.String,Arch.Data.DbEngine.Sharding.IShardingStrategy,System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary,System.Nullable{Arch.Data.DbEngine.OperationType})">
            <summary>
            GetScalarStatement
            </summary>
            <param name="table"></param>
            <param name="logicDbName"></param>
            <param name="shardingStrategy"></param>
            <param name="sql"></param>
            <param name="parameters"></param>
            <param name="extendedParameters"></param>
            <param name="operationType"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.sql.SqlBuilder.GetNonQueryStatement(Arch.Data.Orm.sql.SqlTable,System.String,Arch.Data.DbEngine.Sharding.IShardingStrategy,System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary,System.Nullable{Arch.Data.DbEngine.OperationType})">
            <summary>
            
            </summary>
            <param name="table"></param>
            <param name="logicDbName"></param>
            <param name="shardingStrategy"></param>
            <param name="sql"></param>
            <param name="parameters"></param>
            <param name="extendedParameters"></param>
            <param name="operationType"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.sql.SqlBuilder.GetQueryStatement(Arch.Data.Orm.sql.SqlTable,System.String,Arch.Data.DbEngine.Sharding.IShardingStrategy,Arch.Data.Orm.IQuery,System.Collections.IDictionary,System.Nullable{Arch.Data.DbEngine.OperationType})">
            <summary>
            
            </summary>
            <param name="table"></param>
            <param name="logicDbName"></param>
            <param name="shardingStrategy"></param>
            <param name="query"></param>
            <param name="hints"></param>
            <param name="operationType"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.sql.SqlBuilder.GetSpStatement(Arch.Data.Orm.sql.SqlTable,System.String,Arch.Data.DbEngine.Sharding.IShardingStrategy,System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary,System.Nullable{Arch.Data.DbEngine.OperationType})">
            <summary>
            GetSpStatement
            </summary>
            <param name="table"></param>
            <param name="logicDbName"></param>
            <param name="shardingStrategy"></param>
            <param name="procedureName"></param>
            <param name="parameters"></param>
            <param name="extendedParameters"></param>
            <param name="operationType"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.sql.SqlBuilder.GetSpNonQueryStatement(Arch.Data.Orm.sql.SqlTable,System.String,Arch.Data.DbEngine.Sharding.IShardingStrategy,System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.IDictionary,System.Nullable{Arch.Data.DbEngine.OperationType})">
            <summary>
            GetSpNonQueryStatement
            </summary>
            <param name="table"></param>
            <param name="logicDbName"></param>
            <param name="shardingStrategy"></param>
            <param name="procedureName"></param>
            <param name="parameters"></param>
            <param name="extendedParameters"></param>
            <param name="operationType"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.sql.SqlBuilder.GetPartialSpNonQueryStatement``1(Arch.Data.Orm.sql.SqlTable,System.String,Arch.Data.DbEngine.Sharding.IShardingStrategy,System.String,``0,Arch.Data.Orm.partially.IUpdatePartial{``0},System.Collections.IDictionary,System.Nullable{Arch.Data.DbEngine.OperationType})">
            <summary>
            GetPartialSpNonQueryStatement
            </summary>
            <typeparam name="T"></typeparam>
            <param name="table"></param>
            <param name="logicDbName"></param>
            <param name="shardingStrategy"></param>
            <param name="procedureName"></param>
            <param name="item"></param>
            <param name="updatePartial"></param>
            <param name="hints"></param>
            <param name="operationType"></param>
            <returns></returns>
        </member>
        <member name="F:Arch.Data.Orm.sql.PropertyBridge.field">
            <summary>
            直接赋值
            </summary>
        </member>
        <member name="F:Arch.Data.Orm.sql.PropertyBridge.sor">
            <summary>
            动态方法+emit
            </summary>
        </member>
        <member name="M:Arch.Data.Orm.sql.SqlQuery.#ctor(Arch.Data.Orm.sql.SqlTable)">
            <summary>
            sql查询
            </summary>
        </member>
        <member name="M:Arch.Data.Orm.sql.SqlQuery.Order``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean)">
            <summary>
            排序排序
            </summary>
            <typeparam name="T">dao的实体对象</typeparam>
            <param name="propertyExpression">属性的表达式</param>
            <param name="asc">是否升序 </param>
            <returns>查询对象接口</returns>
        </member>
        <member name="M:Arch.Data.Orm.sql.SqlQuery.Get(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.sql.SqlQuery.Constrain(Arch.Data.Orm.IQuery)">
            <summary>
            包含
            </summary>
            <param name="query">查询对象</param>
            <returns>查询对象接口</returns>
        </member>
        <member name="M:Arch.Data.Orm.sql.SqlQuery.And">
            <summary>
            和
            </summary>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.sql.SqlQuery.Or">
            <summary>
            或
            </summary>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.sql.SqlQuery.In(System.Collections.IList)">
            <summary>
            里
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.sql.SqlQuery.NotIn(System.Collections.IList)">
            <summary>
            不在里
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.sql.SqlQuery.Equal(System.Object)">
            <summary>
            等于
            </summary>
            <param name="val">值</param>
            <returns>查询对象接口</returns>
        </member>
        <member name="M:Arch.Data.Orm.sql.SqlQuery.NotEqual(System.Object)">
            <summary>
            不等于
            </summary>
            <param name="val">值</param>
            <returns>查询对象接口</returns>
        </member>
        <member name="M:Arch.Data.Orm.sql.SqlQuery.Greater(System.Object)">
            <summary>
            大于
            </summary>
            <param name="val">值</param>
            <returns>查询对象接口</returns>
        </member>
        <member name="M:Arch.Data.Orm.sql.SqlQuery.GreaterEqual(System.Object)">
            <summary>
            大于等于
            </summary>
            <param name="val">值</param>
            <returns>查询对象接口</returns>
        </member>
        <member name="M:Arch.Data.Orm.sql.SqlQuery.Less(System.Object)">
            <summary>
            小于
            </summary>
            <param name="val">值</param>
            <returns>查询对象接口</returns>
        </member>
        <member name="M:Arch.Data.Orm.sql.SqlQuery.LessEqual(System.Object)">
            <summary>
            小于等于
            </summary>
            <param name="val">值</param>
            <returns>查询对象接口</returns>
        </member>
        <member name="M:Arch.Data.Orm.sql.SqlQuery.Like(System.String)">
            <summary>
            like操作需要在dao方法内加通配符(%)
            </summary>
            <param name="val">值</param>
            <returns>查询对象接口</returns>
        </member>
        <member name="M:Arch.Data.Orm.sql.SqlQuery.Order(System.String,System.Boolean)">
            <summary>
            排序
            </summary>
            <param name="column">列名</param>
            <param name="asc">是否升序</param>
            <returns>查询对象接口</returns>
        </member>
        <member name="M:Arch.Data.Orm.sql.SqlQuery.GetSql(Arch.Data.Orm.sql.SqlTable,System.Char,System.Char,System.Int32@)">
            <summary>
            
            </summary>
            <param name="table"></param>
            <param name="openQuote"></param>
            <param name="closeQuote"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.sql.SqlQuery.SetParameters(Arch.Data.Orm.sql.SqlTable,Arch.Data.DbEngine.StatementParameterCollection)">
            <summary>
            
            </summary>
            <param name="parameters"></param>
        </member>
        <member name="M:Arch.Data.Orm.sql.SqlQuery.GetSql(Arch.Data.Orm.sql.SqlTable,System.Char,System.Char)">
            <summary>
            
            </summary>
            <param name="table"></param>
            <param name="openQuote"></param>
            <param name="closeQuote"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.sql.SqlQuery`1.And">
            <summary>
            与操作
            </summary>
            <returns>查询对象接口</returns>
        </member>
        <member name="M:Arch.Data.Orm.sql.SqlQuery`1.Or">
            <summary>
            或操作
            </summary>
            <returns>查询对象接口</returns>
        </member>
        <member name="M:Arch.Data.Orm.sql.SqlQuery`1.Constrain(System.String)">
            <summary>
            包含操作
            </summary>
            <param name="column">列名</param>
            <returns>查询对象接口</returns>
        </member>
        <member name="M:Arch.Data.Orm.sql.SqlQuery`1.Constrain(Arch.Data.Orm.IQuery)">
            <summary>
            包含操作
            </summary>
            <param name="query">查询对象</param>
            <returns>查询对象接口</returns>
        </member>
        <member name="M:Arch.Data.Orm.sql.SqlQuery`1.Equal(System.Object)">
            <summary>
            等于操作
            </summary>
            <param name="val">值</param>
            <returns>查询对象接口</returns>
        </member>
        <member name="M:Arch.Data.Orm.sql.SqlQuery`1.NotEqual(System.Object)">
            <summary>
            不等于操作
            </summary>
            <param name="val">值</param>
            <returns>查询对象接口</returns>
        </member>
        <member name="M:Arch.Data.Orm.sql.SqlQuery`1.Greater(System.Object)">
            <summary>
            大于操作
            </summary>
            <param name="val">值</param>
            <returns>查询对象接口</returns>
        </member>
        <member name="M:Arch.Data.Orm.sql.SqlQuery`1.GreaterEqual(System.Object)">
            <summary>
            大于等于操作
            </summary>
            <param name="val">值</param>
            <returns>查询对象接口</returns>
        </member>
        <member name="M:Arch.Data.Orm.sql.SqlQuery`1.Less(System.Object)">
            <summary>
            小于操作
            </summary>
            <param name="val">值</param>
            <returns>查询对象接口</returns>
        </member>
        <member name="M:Arch.Data.Orm.sql.SqlQuery`1.LessEqual(System.Object)">
            <summary>
            小于等于操作
            </summary>
            <param name="val">值</param>
            <returns>查询对象接口</returns>
        </member>
        <member name="M:Arch.Data.Orm.sql.SqlQuery`1.Like(System.String)">
            <summary>
             like操作需要在dao方法内加通配符(%)
            </summary>
            <param name="val">值</param>
            <returns>查询对象接口</returns>
        </member>
        <member name="M:Arch.Data.Orm.sql.SqlQuery`1.In(System.Collections.IList)">
            <summary>
            在范围内操作
            </summary>
            <param name="values">集合接口</param>
            <returns>查询对象接口</returns>
        </member>
        <member name="M:Arch.Data.Orm.sql.SqlQuery`1.NotIn(System.Collections.IList)">
            <summary>
            不在范围内操作
            </summary>
            <param name="values">集合接口</param>
            <returns>查询对象接口</returns>
        </member>
        <member name="M:Arch.Data.Orm.sql.SqlQuery`1.Order(System.String,System.Boolean)">
            <summary>
            排序
            </summary>
            <param name="column">列名</param>
            <param name="ascending">是否升序</param>
            <returns>查询对象接口</returns>
        </member>
        <member name="T:Arch.Data.Orm.sql.SqlTable">
            <summary>
            
            </summary>
        </member>
        <member name="M:Arch.Data.Orm.sql.SqlTableFactory.Build">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.sql.SqlTableFactory.Build(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.sql.SqlTableFactory.Build(System.String,System.Type)">
            <summary>
            
            </summary>
            <param name="prefixName"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Orm.sql.SqlUtils.ResolveType(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="F:Arch.Data.CrossShardDao._table">
            <summary>
            SqlTable
            </summary>
        </member>
        <member name="M:Arch.Data.CrossShardDao.#ctor(System.String)">
            <summary>
            构造初始化
            </summary>
            <param name="logicDbName">逻辑数据库名</param>
        </member>
        <member name="M:Arch.Data.CrossShardDao.BulkInsert``1(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{``0}},System.EventHandler{Arch.Data.DbEngine.Sharding.ErrorEventArg})">
            <summary>
            跨Shard批量插入， 通过OnError事件处理每个Shard发生的异常
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="shuffledData">整理后的数据</param>
            <param name="OnError">每个Shard发生异常时的回调，如果为空，发生异常时直接抛出</param>
            <returns>是否全部成功</returns>
        </member>
        <member name="M:Arch.Data.CrossShardDao.BulkInsert``1(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{``0}},System.Collections.IDictionary,System.EventHandler{Arch.Data.DbEngine.Sharding.ErrorEventArg})">
            <summary>
            跨Shard批量插入， 通过OnError事件处理每个Shard发生的异常
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="shuffledData">整理后的数据</param>
            <param name="extendParams">指令参数，如timeout</param>
            <param name="OnError">每个Shard发生异常时的回调，如果为空，发生异常时直接抛出</param>
            <returns>是否全部成功</returns>
        </member>
        <member name="M:Arch.Data.CrossShardDao.BulkInsert``1(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{``0}},System.Collections.IDictionary,System.EventHandler{Arch.Data.DbEngine.Sharding.ErrorEventArg},Arch.Data.DbEngine.Sharding.ShardingType)">
            <summary>
            跨Shard批量插入， 通过OnError事件处理每个Shard发生的异常
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="shardType">Shard类型枚举，详见枚举描述</param>
            <param name="shuffledData">整理后的数据</param>
            <param name="extendParams">指令参数，如timeout</param>
            <param name="OnError">每个Shard发生异常时的回调，如果为空，发生异常时直接抛出</param>
            <returns>是否全部成功</returns>
        </member>
        <member name="M:Arch.Data.CrossShardDao.BulkInsert``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{``0}},System.Collections.IDictionary,System.EventHandler{Arch.Data.DbEngine.Sharding.ErrorEventArg},Arch.Data.DbEngine.Sharding.ShardingType)">
            <summary>
            跨Shard批量插入， 通过OnError事件处理每个Shard发生的异常
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="logicDbName">逻辑数据库名</param>
            <param name="shardType">Shard类型枚举，详见枚举描述</param>
            <param name="shuffledData">整理后的数据</param>
            <param name="extendParams">指令参数，如timeout</param>
            <param name="OnError">每个Shard发生异常时的回调，如果为空，发生异常时直接抛出</param>
            <returns>是否全部成功</returns>
        </member>
        <member name="M:Arch.Data.CrossShardDao.ExecNonQuery(System.String,System.Collections.Generic.IList{System.String},System.EventHandler{Arch.Data.DbEngine.Sharding.ErrorEventArg})">
            <summary>
            跨Shard执行非查询操作，通过OnError事件处理每个Shard发生的异常
            </summary>
            <param name="sql">SQL语句</param>
            <param name="shards">所有Shard的列表</param>
            <param name="OnError">每个Shard发生异常时的回调，如果为空，发生异常时直接抛出</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:Arch.Data.CrossShardDao.ExecNonQuery(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.Generic.IList{System.String},System.EventHandler{Arch.Data.DbEngine.Sharding.ErrorEventArg})">
            <summary>
            跨Shard执行非查询操作，通过OnError事件处理每个Shard发生的异常
            </summary>
            <param name="sql">SQL语句</param>
            /// <param name="parameters">查询参数</param>
            <param name="shardType">Shard类型枚举，详见枚举描述</param>
            <param name="shards">所有Shard的列表</param>
            <param name="OnError">每个Shard发生异常时的回调，如果为空，发生异常时直接抛出</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:Arch.Data.CrossShardDao.ExecNonQuery(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.Generic.IList{System.String},System.Collections.IDictionary,System.EventHandler{Arch.Data.DbEngine.Sharding.ErrorEventArg})">
            <summary>
            跨Shard执行非查询操作，通过OnError事件处理每个Shard发生的异常
            </summary>
            <param name="sql">SQL语句</param>
            <param name="parameters">查询参数</param>
            <param name="shardType">Shard类型枚举，详见枚举描述</param>
            <param name="shards">所有Shard的列表</param>
            <param name="extendParams">指令参数：如timeout</param>
            <param name="OnError">每个Shard发生异常时的回调，如果为空，发生异常时直接抛出</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:Arch.Data.CrossShardDao.ExecNonQuery(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.Generic.IList{System.String},System.Collections.IDictionary,System.EventHandler{Arch.Data.DbEngine.Sharding.ErrorEventArg},Arch.Data.DbEngine.Sharding.ShardingType)">
            <summary>
            跨Shard执行非查询操作，通过OnError事件处理每个Shard发生的异常
            </summary>
            <param name="sql">SQL语句</param>
            <param name="parameters">查询参数</param>
            <param name="shardType">Shard类型枚举，详见枚举描述</param>
            <param name="shards">所有Shard的列表</param>
            <param name="extendParams">指令参数：如timeout</param>
            <param name="OnError">每个Shard发生异常时的回调，如果为空，发生异常时直接抛出</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:Arch.Data.CrossShardDao.ExecNonQuery(System.String,System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.Generic.IList{System.String},System.Collections.IDictionary,System.EventHandler{Arch.Data.DbEngine.Sharding.ErrorEventArg},Arch.Data.DbEngine.Sharding.ShardingType)">
            <summary>
            跨Shard执行非查询操作，通过OnError事件处理每个Shard发生的异常
            </summary>
            <param name="logicDbName">逻辑数据库名</param>
            <param name="sql">SQL语句</param>
            <param name="parameters">查询参数</param>
            <param name="shardType">Shard类型枚举，详见枚举描述</param>
            <param name="shards">所有Shard的列表</param>
            <param name="extendParams">指令参数：如timeout</param>
            <param name="OnError">每个Shard发生异常时的回调，如果为空，发生异常时直接抛出</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:Arch.Data.CrossShardDao.SelectDataTable(System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            执行查询语句
            </summary>
            <param name="sql">SQL语句</param>
            <param name="shardType">Shard类型枚举，详见枚举描述</param>
            <param name="shards">所有Shard的列表</param>
            <returns>DataTable结果</returns>
        </member>
        <member name="M:Arch.Data.CrossShardDao.SelectDataTable(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.Generic.IList{System.String})">
            <summary>
            执行查询语句
            </summary>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <param name="shardType">Shard类型枚举，详见枚举描述</param>
            <param name="shards">所有Shard的列表</param>
            <returns>DataTable结果</returns>
        </member>
        <member name="M:Arch.Data.CrossShardDao.SelectDataTable(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.Generic.IList{System.String},System.Collections.IDictionary)">
            <summary>
            执行查询语句
            </summary>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <param name="shardType">Shard类型枚举，详见枚举描述</param>
            <param name="shards">所有Shard的列表</param>
            <param name="extendParams">指令参数，如timeout</param>
            <returns>DataTable结果</returns>
        </member>
        <member name="M:Arch.Data.CrossShardDao.SelectDataTable(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.Generic.IList{System.String},System.Collections.IDictionary,Arch.Data.DbEngine.OperationType,Arch.Data.DbEngine.Sharding.ShardingType)">
            <summary>
            执行查询语句
            </summary>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <param name="operationType">操作类型，读写分离，默认从slave库读取</param>
            <param name="shardType">Shard类型枚举，详见枚举描述</param>
            <param name="shards">所有Shard的列表</param>
            <param name="extendParams">指令参数，如timeout</param>
            <returns>DataTable结果</returns>
        </member>
        <member name="M:Arch.Data.CrossShardDao.SelectDataTable(System.String,System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.Generic.IList{System.String},System.Collections.IDictionary,Arch.Data.DbEngine.OperationType,Arch.Data.DbEngine.Sharding.ShardingType)">
            <summary>
            执行查询语句
            </summary>
            <param name="logicDbName">逻辑数据库名</param>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <param name="operationType">操作类型，读写分离，默认从slave库读取</param>
            <param name="shardType">Shard类型枚举，详见枚举描述</param>
            <param name="shards">所有Shard的列表</param>
            <param name="extendParams">指令参数，如timeout</param>
            <returns>DataTable结果</returns>
        </member>
        <member name="M:Arch.Data.CrossShardDao.GetAll``1(System.Collections.Generic.IList{System.String})">
            <summary>
            获取所有记录
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="shards">所有Shard的列表</param>
            <returns>中间处理类，可以调用Top或者ToList等方法获取结果集</returns>
        </member>
        <member name="M:Arch.Data.CrossShardDao.GetAll``1(System.Collections.Generic.IList{System.String},System.Collections.IDictionary)">
            <summary>
            获取所有记录
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="extendParams">指令参数，如果timeout</param>
            <param name="operationType">操作类型，读写分离，默认从slave库读取</param>
            <param name="shardType">Shard类型枚举，详见枚举描述</param>
            <param name="shards">所有Shard的列表</param>
            <returns>中间处理类，可以调用Top或者ToList等方法获取结果集</returns>
        </member>
        <member name="M:Arch.Data.CrossShardDao.GetAll``1(System.Collections.Generic.IList{System.String},System.Collections.IDictionary,Arch.Data.DbEngine.OperationType,Arch.Data.DbEngine.Sharding.ShardingType)">
            <summary>
            获取所有记录
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="extendParams">指令参数，如果timeout</param>
            <param name="operationType">操作类型，读写分离，默认从slave库读取</param>
            <param name="shardType">Shard类型枚举，详见枚举描述</param>
            <param name="shards">所有Shard的列表</param>
            <returns>中间处理类，可以调用Top或者ToList等方法获取结果集</returns>
        </member>
        <member name="M:Arch.Data.CrossShardDao.GetAll``1(System.String,System.Collections.Generic.IList{System.String},System.Collections.IDictionary,Arch.Data.DbEngine.OperationType,Arch.Data.DbEngine.Sharding.ShardingType)">
            <summary>
            获取所有记录
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="logicDbName">逻辑数据库名</param>
            <param name="extendParams">指令参数，如果timeout</param>
            <param name="operationType">操作类型，读写分离，默认从slave库读取</param>
            <param name="shardType">Shard类型枚举，详见枚举描述</param>
            <param name="shards">所有Shard的列表</param>
            <returns>中间处理类，可以调用Top或者ToList等方法获取结果集</returns>
        </member>
        <member name="M:Arch.Data.CrossShardDao.SelectFirst``1(System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            获取第一行对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="shards">所有Shard列表</param>
            <returns>中间处理类，可以调用Top或者ToList等方法获取结果集</returns>
        </member>
        <member name="M:Arch.Data.CrossShardDao.SelectFirst``1(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.Generic.IList{System.String})">
            <summary>
            获取第一行对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameters">参数</param>
            <param name="shardType">Shard类型枚举，详见枚举描述</param>
            <param name="shards">所有Shard列表</param>
            <returns>中间处理类，可以调用Top或者ToList等方法获取结果集</returns>
        </member>
        <member name="M:Arch.Data.CrossShardDao.SelectFirst``1(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.Generic.IList{System.String},System.Collections.IDictionary)">
            <summary>
            获取第一行对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameters">参数</param>
            <param name="shardType">Shard类型枚举，详见枚举描述</param>
            <param name="shards">所有Shard列表</param>
            <param name="extendParams">指令参数，如timeout</param>
            <returns>中间处理类，可以调用Top或者ToList等方法获取结果集</returns>
        </member>
        <member name="M:Arch.Data.CrossShardDao.SelectFirst``1(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.Generic.IList{System.String},System.Collections.IDictionary,Arch.Data.DbEngine.OperationType,Arch.Data.DbEngine.Sharding.ShardingType)">
            <summary>
            获取第一行对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameters">参数</param>
            <param name="operationType">操作类型，读写分离，默认从slave库读取</param>
            <param name="shardType">Shard类型枚举，详见枚举描述</param>
            <param name="shards">所有Shard列表</param>
            <param name="extendParams">指令参数，如timeout</param>
            <returns>中间处理类，可以调用Top或者ToList等方法获取结果集</returns>
        </member>
        <member name="M:Arch.Data.CrossShardDao.SelectFirst``1(System.String,System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.Generic.IList{System.String},System.Collections.IDictionary,Arch.Data.DbEngine.OperationType,Arch.Data.DbEngine.Sharding.ShardingType)">
            <summary>
            获取第一行对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="logicDbName">逻辑数据库名</param>
            <param name="sql">sql语句</param>
            <param name="parameters">参数</param>
            <param name="operationType">操作类型，读写分离，默认从slave库读取</param>
            <param name="shardType">Shard类型枚举，详见枚举描述</param>
            <param name="shards">所有Shard列表</param>
            <param name="extendParams">指令参数，如timeout</param>
            <returns>中间处理类，可以调用Top或者ToList等方法获取结果集</returns>
        </member>
        <member name="M:Arch.Data.CrossShardDao.SelectFirst``1(Arch.Data.Orm.IQuery,System.Collections.Generic.IList{System.String})">
            <summary>
            获取第一行对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="query">sql语句</param>
            <param name="shards">所有Shard列表</param>
            <returns>中间处理类，可以调用Top或者ToList等方法获取结果集</returns>
        </member>
        <member name="M:Arch.Data.CrossShardDao.SelectFirst``1(Arch.Data.Orm.IQuery,System.Collections.Generic.IList{System.String},System.Collections.IDictionary)">
            <summary>
            获取第一行对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="query">查询对象</param>
            <param name="shardType">Shard类型枚举，详见枚举描述</param>
            <param name="shards">所有Shard列表</param>
            <param name="extendParams">指令参数，如timeout</param>
            <returns>中间处理类，可以调用Top或者ToList等方法获取结果集</returns>
        </member>
        <member name="M:Arch.Data.CrossShardDao.SelectFirst``1(Arch.Data.Orm.IQuery,System.Collections.Generic.IList{System.String},System.Collections.IDictionary,Arch.Data.DbEngine.OperationType,Arch.Data.DbEngine.Sharding.ShardingType)">
            <summary>
            获取第一行对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="query">查询对象</param>
            <param name="operationType">操作类型，读写分离，默认从slave库读取</param>
            <param name="shardType">Shard类型枚举，详见枚举描述</param>
            <param name="shards">所有Shard列表</param>
            <param name="extendParams">指令参数，如timeout</param>
            <returns>中间处理类，可以调用Top或者ToList等方法获取结果集</returns>
        </member>
        <member name="M:Arch.Data.CrossShardDao.SelectFirst``1(System.String,Arch.Data.Orm.IQuery,System.Collections.Generic.IList{System.String},System.Collections.IDictionary,Arch.Data.DbEngine.OperationType,Arch.Data.DbEngine.Sharding.ShardingType)">
            <summary>
            获取第一行对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="logicDbName">逻辑数据库名</param>
            <param name="query">查询对象</param>
            <param name="operationType">操作类型，读写分离，默认从slave库读取</param>
            <param name="shardType">Shard类型枚举，详见枚举描述</param>
            <param name="shards">所有Shard列表</param>
            <param name="extendParams">指令参数，如timeout</param>
            <returns>中间处理类，可以调用Top或者ToList等方法获取结果集</returns>
        </member>
        <member name="M:Arch.Data.CrossShardDao.SelectList``1(System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            获取所有对象集合
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="shards">所有Shard列表</param>
            <returns>中间处理类，可以调用Top或者ToList等方法获取结果集</returns>
        </member>
        <member name="M:Arch.Data.CrossShardDao.SelectList``1(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.Generic.IList{System.String})">
            <summary>
            获取所有对象集合
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameters">参数</param>
            <param name="shardType">Shard类型枚举，详见枚举描述</param>
            <param name="shards">所有Shard列表</param>
            <returns>中间处理类，可以调用Top或者ToList等方法获取结果集</returns>
        </member>
        <member name="M:Arch.Data.CrossShardDao.SelectList``1(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.Generic.IList{System.String},System.Collections.IDictionary)">
            <summary>
            获取所有对象集合
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameters">参数</param>
            <param name="operationType">操作类型，读写分离，默认从slave库读取</param>
            <param name="shardType">Shard类型枚举，详见枚举描述</param>
            <param name="shards">所有Shard列表</param>
            <param name="extendParams">指令参数，如timeout</param>
            <returns>中间处理类，可以调用Top或者ToList等方法获取结果集</returns>
        </member>
        <member name="M:Arch.Data.CrossShardDao.SelectList``1(System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.Generic.IList{System.String},System.Collections.IDictionary,Arch.Data.DbEngine.OperationType,Arch.Data.DbEngine.Sharding.ShardingType)">
            <summary>
            获取所有对象集合
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameters">参数</param>
            <param name="operationType">操作类型，读写分离，默认从slave库读取</param>
            <param name="shardType">Shard类型枚举，详见枚举描述</param>
            <param name="shards">所有Shard列表</param>
            <param name="extendParams">指令参数，如timeout</param>
            <returns>中间处理类，可以调用Top或者ToList等方法获取结果集</returns>
        </member>
        <member name="M:Arch.Data.CrossShardDao.SelectList``1(System.String,System.String,Arch.Data.DbEngine.StatementParameterCollection,System.Collections.Generic.IList{System.String},System.Collections.IDictionary,Arch.Data.DbEngine.OperationType,Arch.Data.DbEngine.Sharding.ShardingType)">
            <summary>
            获取所有对象集合
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="logicDbName">逻辑数据库名</param>
            <param name="sql">sql语句</param>
            <param name="parameters">参数</param>
            <param name="operationType">操作类型，读写分离，默认从slave库读取</param>
            <param name="shardType">Shard类型枚举，详见枚举描述</param>
            <param name="shards">所有Shard列表</param>
            <param name="extendParams">指令参数，如timeout</param>
            <returns>中间处理类，可以调用Top或者ToList等方法获取结果集</returns>
        </member>
        <member name="M:Arch.Data.CrossShardDao.SelectList``1(Arch.Data.Orm.IQuery,System.Collections.Generic.IList{System.String})">
            <summary>
            获取所有对象集合
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="query">查询对象</param>
            <param name="shards">所有Shard列表</param>
            <returns>中间处理类，可以调用Top或者ToList等方法获取结果集</returns>
        </member>
        <member name="M:Arch.Data.CrossShardDao.SelectList``1(Arch.Data.Orm.IQuery,System.Collections.Generic.IList{System.String},System.Collections.IDictionary)">
            <summary>
            获取所有对象集合
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="query">查询对象</param>
            <param name="shardType">Shard类型枚举，详见枚举描述</param>
            <param name="shards">所有Shard列表</param>
            <param name="extendParams">指令参数，如timeout</param>
            <returns>中间处理类，可以调用Top或者ToList等方法获取结果集</returns>
        </member>
        <member name="M:Arch.Data.CrossShardDao.SelectList``1(Arch.Data.Orm.IQuery,System.Collections.Generic.IList{System.String},System.Collections.IDictionary,Arch.Data.DbEngine.OperationType,Arch.Data.DbEngine.Sharding.ShardingType)">
            <summary>
            获取所有对象集合
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="query">查询对象</param>
            <param name="operationType">操作类型，读写分离，默认从slave库读取</param>
            <param name="shardType">Shard类型枚举，详见枚举描述</param>
            <param name="shards">所有Shard列表</param>
            <param name="extendParams">指令参数，如timeout</param>
            <returns>中间处理类，可以调用Top或者ToList等方法获取结果集</returns>
        </member>
        <member name="M:Arch.Data.CrossShardDao.SelectList``1(System.String,Arch.Data.Orm.IQuery,System.Collections.Generic.IList{System.String},System.Collections.IDictionary,Arch.Data.DbEngine.OperationType,Arch.Data.DbEngine.Sharding.ShardingType)">
            <summary>
            获取所有对象集合
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="logicDbName">逻辑数据库名</param>
            <param name="query">查询对象</param>
            <param name="operationType">操作类型，读写分离，默认从slave库读取</param>
            <param name="shardType">Shard类型枚举，详见枚举描述</param>
            <param name="shards">所有Shard列表</param>
            <param name="extendParams">指令参数，如timeout</param>
            <returns>中间处理类，可以调用Top或者ToList等方法获取结果集</returns>
        </member>
        <member name="P:Arch.Data.CrossShardDao.LogicDbName">
            <summary>
            Database Set name
            </summary>
        </member>
        <member name="P:Arch.Data.CrossShardDao.ShardingStrategy">
            <summary>
            分片策略
            </summary>
        </member>
        <member name="T:Arch.Data.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Arch.Data.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Arch.Data.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Arch.Data.Properties.Resources.AppMarkDownException">
            <summary>
              Looks up a localized string similar to The app is marked as down, cantact the app internals administrator(the one can modify configuration through app internals) for more information!.
            </summary>
        </member>
        <member name="P:Arch.Data.Properties.Resources.DalConfigNotFoundException">
            <summary>
              Looks up a localized string similar to DAL.config not found, check web.config or ConfigGen first!.
            </summary>
        </member>
        <member name="P:Arch.Data.Properties.Resources.DalTracingNextPhaseException">
            <summary>
              Looks up a localized string similar to Dal Phase error, can not navigate to next phase, current phase is {0}.
            </summary>
        </member>
        <member name="P:Arch.Data.Properties.Resources.DALVersion">
            <summary>
              Looks up a localized string similar to 1.4.1.0.
            </summary>
        </member>
        <member name="P:Arch.Data.Properties.Resources.DatabaseSetDoesNotExistException">
            <summary>
              Looks up a localized string similar to Database set &apos;{0}&apos; doesn&apos;t exist!.
            </summary>
        </member>
        <member name="P:Arch.Data.Properties.Resources.DBMarkDownException">
            <summary>
              Looks up a localized string similar to This all in one key {0} is marked as down, can not execute database operation, cantact the app internals administrator(the one can modify configuration through app internals) for more information!.
            </summary>
        </member>
        <member name="P:Arch.Data.Properties.Resources.InvalidDatabaseProviderException">
            <summary>
              Looks up a localized string similar to Database provider &apos;{0}&apos; type is invalid, maybe you missed a reference!.
            </summary>
        </member>
        <member name="M:Arch.Data.Utility.ParameterUtility.NormalizeInParam(System.Collections.IEnumerable,Arch.Data.DbEngine.StatementParameterCollection,System.String,System.Boolean)">
            <summary>
            将  List{1,2,3},转换成 @p0,@p1,@p2 目前只支持int long string, 且string默认是AnsiString，请参考 ansiString参数
            </summary>
            <param name="ie">集合</param>
            <param name="prex">前缀，默认p</param>
            <param name="ps">参数集合</param>
            <param name="ansiString">是否是AnsiString(对应于Varchar)，默认是true，如果是NVarchar，传入False</param>
            <returns></returns>
        </member>
        <member name="T:Arch.Data.Common.Util.ShardingUtil">
            是否做了Sharding
            
            判断流程（需要考虑性能）：
            1. IsNeedShard : 是否在Dal.config中配置了ShardingStrategy，如果是False，则IsShardByDb始终是False
            2. IsShardByDb： 是否分库，即是否在Dal.config为每个DatabaseSet中配置了多个数据库
            3. 如果传入TABLEID，则表名不相同
            4. 如果传入SHARDID，则不需要自动计算
                4.1 如果没有传入ShardID，且IsShardByDb为True，则自动计算ShardID
                4.2 如果IsShardByDb为True，但是计算出来ShardID是NULL，则抛出异常
        </member>
        <member name="M:Arch.Data.Common.Util.ShardingUtil.IsShardEnabled(Arch.Data.DbEngine.Sharding.IShardingStrategy)">
            <summary>
            Whether shard is enabled
            </summary>
            <param name="shardingStrategy"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Common.Util.ShardingUtil.IsShardByDb(Arch.Data.DbEngine.Sharding.IShardingStrategy)">
            <summary>
            
            </summary>
            <param name="shardingStrategy"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Common.Util.ShardingUtil.IsShardByTable(Arch.Data.DbEngine.Sharding.IShardingStrategy)">
            <summary>
            
            </summary>
            <param name="shardingStrategy"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Common.Util.ShardingUtil.GetShardingType(Arch.Data.DbEngine.Sharding.IShardingStrategy)">
            <summary>
            有坑, 当配置不正确时，会返回ShardingType.ShardByDB
            </summary>
            <param name="shardingStrategy"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Common.Util.ShardingUtil.GetShardIdByHints(System.Collections.IDictionary)">
            <summary>
            从hints中提取ShardID
            </summary>
            <param name="hints"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Common.Util.ShardingUtil.GetTableIdByHints(System.Collections.IDictionary)">
            <summary>
            从hints中提取TABLEID
            </summary>
            <param name="hints"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Common.Util.ShardingUtil.CalculateShardId(Arch.Data.DbEngine.Sharding.IShardingStrategy,System.IComparable)">
            <summary>
            计算在哪个Shard执行操作
            </summary>
            <param name="shardingStrategy"></param>
            <param name="shardColumnValue"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Common.Util.TypeUtils.IsNumericType(System.Type)">
            <summary>
            判断某数据是否是数字
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Arch.Data.Common.Util.TypeUtils.GetNumericTypeEnum(System.Type)">
            <summary>
            获取某数据是Int还是Long，或者是Double
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
    </members>
</doc>
